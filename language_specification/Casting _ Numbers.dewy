/{
In dewy, there are two main types of casts that can be performed:
-value casts, where the value is preserved between casted items
-data casts, where the underlying data is preserved between casted items

value casting is performed using the "as" keyword. 
literally "convert: value as type"
>>> uint64 apple = 1234
>>> apple as real32
1.234e3

data casting is performed using the "transmute" keyword.
literally "convert: variable transmute (into) type"
>>> banana = 3.4028182e18
>>> banana transmute int32
1581049076

}/

foo()
{   
	val = rand(uint64)			//generate a random 64-bit uint
	a = val as real64			//cast value of uint into real
	b = val transmute real64	//cast data of uint into real
	
	//can declare variables with cstyle type prefix
	//uint64 val = rand(uint64) 		//should be able to ignore second uint64 since already specified
	//real64 a = val as real64			//cannot ignore the second real64 or will have type mismatch
	//real64 b = val transmute real64	//again cannot ignore second real64
	
    
}

//note about the rand function
rand_example()
{
	//the rand function should be a single function, and not have to have different names based on the type of output wanted
	//also can specify the units on the end
	apple = rand(uint32) kilograms		//generate a random number of kilograms
	peach = rand(real64) meters/s/s		//generate a random acceleration
	
	a = apple as megagrams				//returns the value of apple converted to megagrams with the unit megagrams
	b = apple as slugs					//returns the value of apple converted to slugs with the unit slugs
	c = apple transmute meters			//returns the value of apple with the unit meters (no value conversion)
	d = apple transmute unitless		//returns a uint32 with the value of apple and no units
	e = apple.value						//identical functionality as transmute unitless
	f = pear transmute uint64 radians	//convert both unit and datatype at the same time
	
	//alternatives for transmuting?
	//variables will have 3 default/main datafields that can be accessed (and potentially set intependently)
	apple.value = 36		//change the binary data in apple to a value of 36
	apple.type = real64		//change the data type of apple to be real64 (underlying data unchanged)
	apple.unit = pascals	//change the unit type of apple to be pascals
	
	
	//what about specifying the distribution to pull from?
		//what about the default range or specifying a range? i.e. the whole domain of the datatype or [0,1]
		//distribution should specify the range
}



/{
number literals in dewy can be specified with different qualifiers:
-type
-unit
-base

types - bool int uint real cplx quat

units - 

different bases:
	0b101001	//binary number written in binary
	576_2		//binary number written in base 10
	0x1AD09FF	//hex number written in hex
	6528768_16	//hex number written in base 10
	127_128		//base 128 number written in base 10
	#1X5E_12	//base 12 number written in base 12 (need a prefix for numbers written in the specified base)

mixed base notation - 26_124, 4_7, 0xF, #X_12	//a number written in mixed base notation. data will be packed with maximum efficiency
//should probably clean up so that each digit is only a digit in the specified base, not longer
var = 26_124, 4_7, 0xF, #X_12
var[0] // returns #X_12
var[1] // returns 0xF
etc.
etc.
}/