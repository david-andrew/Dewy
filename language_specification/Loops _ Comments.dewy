//some of this stuff is depreciated
//loops and any other flow control dont require brackets
//also single line control statements are allowed without brackets?
loop i in 1:20 print(i)

loop item in list
{
	print("item is" + item)
	print("iteration #: " + loop.count)
}

loop i in 17:38 
{ 
	loop j in -42:12 
	{ 
		loop k in 1:10 
		{
			loop[0].count //returns how many loops have executed in the outermost loop
			loop[1].count //returns count for middle loop
			loop[2].count //returns count for inner loop
	
			loop count in loop[].count print(count)	//prints out the counts for each loop
		}
	}
}

main
{

	//loops consist of the following pieces:
	//the statement "loop"
	//an indexing bracket pair "[]"
	//optional conditions and or iterators for the loop
	//	-conditions index program control flow while iterators index the loop body
	//a block bracket pair "{}"
	//optional program statements to be executed contained within the block
    
    
    //////DEALING WITH MULTIPLE CONDITIONS/ITERATORS////////
	//need a way to handle iterators that don't match up in length
    //probably just make iterated variables = null when they finish
    //loops will continue until any condition is false and nothing is iterating
    //assignment statements are only performed once, precisely the first time the index block is called
    
	//basic loop structure:
	loop [ /{conditions/iterators}/ ] 
	{
		//statements
	}
	
	
	//variables are assumed to be preinitialized for the most part in this example
	
	//lists can be initilized like so: (both statements are identical)
	// l = 1:20:2
	// l = 1 to 20 by 2
	//the syntax "<variable> in <list>" iterates that variable through the list
    
    
    //potentially use "auto" keyword to specify dependent lists
    loop [a in 36:-17, b in 0:_:_]
    {
        //a iterates through [36, 35, 34, ... -15, -16, -17]
        //b counts from 0 up until the end of the loop
        //i.e. b iterates through [0, 1, 2, ... 51, 52, 53]
    }
    //auto counting probably requires some context to specify what it is dependent on
    
    //another attempt at auto counting
    loop [a in 34:76, enumerate b]{} 
    
    //another attempt at auto count notation
    loop [a=0 ++ <? 10] 
    //same as for (int a=0; a<10; a++){}
    {
        //loop body
    }
	
    //another attempt for auto count notation
    loop [a in 0 + 1 <? 10] {}
    
    //another attempt for auto count notation. this one works pretty well
    loop [a from 0 by 1 <? 10]{}    //alternative to from could be "counts"
    
    loop [a in 0 by 1 <? 10]{}
    //this would create an iterated list, while the above would maintain a, and check every loop cycle if it was less than 10
    //alternatively, the above would set a loop interrupt at 10 cycles so that it doesn't need to continually check if the condition is true
    
    
	//basic for loop with multiple iterators
	loop [image in image_list, i in 0:length(image_list)] //need good simple way to define iterater derived from main loop iterator, e.g. 0:_ or? 0:end or? 0:auto 
	{
		//inside of loop
		loop.start
		{
			//execute this code only on 0th (first) time through the loop
		}
		
		loop.end
		{
			//execute this code only on the last time through the loop
		}
		
		//regular code exacuted every loop iteration
		if [apple =? banana] { /{do something here}/ }
	}

    
	//boolean comparison symbols
	// >? >=? <=? <? =? not? ->?
	// and or xor nand nor xnor not
    
	loop [i not? 10] 
	{
		/{
			This is a regular while loop
			it will run as long as the condition (i not equal 10) is true
		}/
		
		//do stuff inside of the loop
	}



	int[] arr = //need a good array initialization syntax

	loop [val in arr, i = 0, i++]
	{
		//iterate through each element in arr
		//index by i
		//
	}

    //note about loop iterators: there is 1 master iterator that all other iterators must either match or be derived from
    //e.g. if the loop is for each element in an array "val in arr", then any subsequent iterators must be the same length as arr
    //while style loop may (should?) only have one (1) single conditional statement
    //--alternatively all conditionals would be logically and-ed together
    
    loop [i <? 10, j >=? 50, k !? 12 ]
    {
        //loop until either of i >= 10, j < 50, or k = 12 is true
        
    }

	
	//do while loop
	loop
	{
		//loop body
		//do stuff here
		//this gets executed before the condition is checked
	} 
	[i not? 15]
	

	
	//lastly infinite loops are loops with empty/always true indexes
	loop []
	{
		//do forever
	}
	//unreachable code
	
    //alternative infinite loop forms
    loop [true] { /{do forever}/ }
    loop { /{do forever}/ } []
	loop { /{do forever}/ } [true]
    


    
    //what about allowing loops with multiple index blocks
    //also allowing index blocks inside the loop to specifiy when they occur
    //might not work too well though b/c assigning counting iteraters and incrementing them would need to be in separate blocks...
    loop 
    {
        [ /{first set of indexers/conditions/etc}/ ]
        [ /{more indexers/conditions/etc}/ ]
        [count i=0 by 10]   //these lines do basically the same thing
        [j=0, j+=10]        //

        //loop body
    
        [/{conditions at the end as in do while loops}/]
        [k !? 12]
    }
    
    //////checking if syntax highlighting works properly//////
    if [(true xor false) nand (apple =? 256.654 xnor fruit =? "banana")] {}
    if [ |apple - 5274.7654| <=? 0.0001] {} 
    //for float equality, perhaps automatically do epsilon comparison
    //e.g. "apple =? 256.654" literally does "|apple - 256.654| < epsilon"
    //where epsilon would be defined in a standard settings file.
    //epsilon = 0 would mean only exact values 
    
    
	

    
	/{This is a block comment}/
	/{
		Block comments can be many lines long
		Here is an explanation for what (), {}, [], <> mean
		
		[ ] represents an index of some sort
			indexes can access the nth array element
			e.g. arr[15] = "apple"
			stores the string "apple" to the 15th element in the array arr
			(assuming arr is an array of strings)
        [ ] is also used to index loops and other branching statements
			this is canonically indexing the program flow path
            lastly this is used to define a (n-dimensional) list literal
			
		{ } represents a scope/block
            this works basically the same way that scopes work in other languages
        
        blind {}
        blind(...){ } is an anonymous scope
            in an anonymous scope, only argument values are available
            the argument set is optional. this means blind{} has no variables available to it
		
		( ) represents an arguement set
        
        < > represents a tensor
        
        | | represents an absolute value
        
        
        
        
	}/

}