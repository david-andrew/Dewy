
//multiple conditions for if statements
//normal if statements take the form:

if [/{condition 1}/]
{
    //execute if condition 1 is true
}
else if [/{condition 2}/]
{
    //execute if first was false and condition 2 is true
}
else if [/{condition 3}/]
{
    //execute if first and second were false and condition 3 is true
}
else
{
    //execute if all above conditions failed
}


//want to introduce external boolean operators to multiple conditions
//this is a pure example of "and chaining" if statements:
if [/{condition 1}/]
{
    //execute if condition 1 is true
}
and if [/{condition 2}/]
{
    //execute if condition 2 is true
}
and if [/{condition 3}/]
{
    //execute if condition 3 is true
}
else
{
    //execute if any of conditions 1, 2, or 3 are false
    //[condition 1] and [condition 2] and [condition 3] == false
}


//basically each else is reached according to the result of potentially multiple if statment outcomes


//this is a pure example of "or chaining" if statements:
if [/{condition 1}/]
{
    //execute if condition 1 is true
}
or if [/{condition 2}/]
{
    //execute if condition 2 is true
}
or if [/{condition 3}/]
{
    //execute if condition 3 is true
}
else
{
    //execute if all of conditions 1, 2, or 3 are false
    //[condition 1] or [condition 2] or [condition 3] == false
}


//to put simply what is happening here, each of the sequential branch conditions are collected to gether
//then if the result is true according to the pattern of the chain, the final else statement is returned
//i.e. and chaining from above would check "[condition 1] and [condition 2] and [condition 3]" to decide whether or not to execute else
//i.e. or chaining from above would check "[condition 1] or [condition 2] or [condition 3]"

//any combination of boolean comparisons, as well as elses, and else ifs should be able to be used
//logically combined if statements are grouped, and each else or else if is evaluated against all in the previous group

//super long/complex example. conditions will be abbreviated c1, c2, c3, etc.
if [c0] {0} or if [c1] {1} and if [c2] {2}
else if [c3] {3} //only checks if [c0 or c1 and c2] =? false
else if [c4] {4} nand if [c5] {5}   //only checks if ([c0 or c1 and c2] =? false) and [c3] =? false
else {6} //only checks if ( ( [c0 or c1 and c2] =? false ) and [c3] =? false ) and ( [c4 nand c5] =? false )


//checking divisors example
x = 27

if [x % 2 =? 0] {print("{} is divisible by 2", x)}
or if [x % 3 =? 0] { println("{} is divisible by 3", x) }
or if [x % 4 =? 0] { println("{} is divisible by 4", x) }
or if [x % 6 =? 0] { println("{} is divisible by 6", x) }
or if [x % 12 =? 0] { println("{} is divisible by 12", x) }
else { println("{} is not divisible by 2, 3, 4, 6, or 12") }


//see if I can write the above more succinctly
x = 18

loop [i in [2 3 4 6 12] ignore x % i =? 0]      //maybe have slightly different syntax, but really like this idea
{
    println("{} is divisible by {}", x, i)
    //e.g. if x = 18, i iterates as i in [2 3 6]
    //the following lines will be printed
    //18 is divisible by 2
    //18 is divisible by 3
    //18 is divisible by 6
}

//possible syntax for doing list pruning
i in 1:20 select x % i =? 0
i in [2 3 4 6 12] cull i % x =? 0

//this is honestly python's inline loop functionality?
//maybe not, doesn't seem to have a good culling/subselecting method

//basically just describing boolean selection
arr = 1:20
arr[arr % 2 =? 0]

arr2 = 1:20[1:20 % 2 =? 0]  //need a good way to access the current item. maybe "this" or "_" or "current" or "self" or "item"

arr3 = 1:20[ % 2 =? 0 ]

