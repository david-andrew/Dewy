//This will outline how the dewy compiler vs whole language will work

/{
	The dewy language will have two main parts:
		1) bare-metal dewy
		2) usual dewy
		
	Bare-metal dewy will be what the compiler actually compiles, while usual dewy will be the whole language that people will use.
	
	Bare-metal dewy will be essentially a one-to-one mapping of the llvm's IR language, i.e. for each single llvm IR command / punctuation / etc. , there will be an equivalent bare-metal dewy command / punctuation / etc. which can be exactly interchanged with it. In addition, bare metal dewy will have functionality for defining further functionality. something like a define{} block where a new symbol or keyword or etc. will be defined in terms of the existing bare-metal dewy syntax as well as other defined items. This way, the compiler can reconstruct the full LLVM IR of dewy file by either translating directly the bare-metal command, or converting defined features (recursively) into their bare-metal commands, which in tern get converted directly to LLVM IR.
	for a regular dewy file, if the keyword "no_prologue" is not present as the first directive in the file, the compiler will start by processing the file prologue.dewy, which will be contained in the standard library folder. prologue.dewy will contain a series of definitions which will define the rest of the usual dewy language in terms of bare-metal dewy and contained defines. This way, the language can be built of from scratch within itself, and have a very simple compiler. 
	(potential alteration) instad of having equivalent dewy statements, just have the raw IR, maybe contained in a special {} block if the syntax clashes with dewy's syntax.
	
	firstly define would define base symbols that will be used, and then from there can define other elements based on regular language? patterns
	
	//base definition of the square brackets
	define [ as [
	define ] as ]
	//perhaps wouldn't need these, as could just use them in the expression that im building
	
	define <identifier> as //probably some sort of regex, for an identifier
	define <expression> as //some sort of regular language definition of an expression
	
	define <expression> + <expression> as //the raw LLVM IR that adds two numbers together
	//this would leave the expressions interspersed with the LLVM IR, which would then later need to be converted further into its own IR
	
	will probably take advantage of Extended Backusâ€“Naur form for the way that definitions are written out.
	
	as things are being defined, the compiler will make a sort of symbol table with all of the definitions, which it will then use to replace code when it finds a match
	
	definitions will work like this in the compiler
	
	collect all define statements in the current file into a string queue called raw_defines
	while raw_defines.length > 0			//note that length and size will probably be synonyms
		curr_define = raw_defines.pop		//get next element
		try
			parse curr_define with bare-metal and existing defines
			//if it hits a sequence that is not legal based on the so far defined rule, it fails
		catch
			raw_defines.push(cur_define)	//push to back of queue
		

	//probably have prologue.dewy define how to search for other files that might have defines. definitely allow/define ability to process a specified file, so that prologue can call on code from other files before it gets to the main file
	
	after prologue.dewy runs and defines usual dewy (plus any extras that a use may be so inclined to include), the file being compiled will be processed. Afterwords, there may be an epilogue.dewy that is called, but I'm not sure what purpose it would have.
	
	
}/