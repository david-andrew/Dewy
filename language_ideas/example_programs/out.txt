identifier      functions
operation       =
bracket         [
operation       @
identifier      twelve_days_of_christmas
operation       @
identifier      FizzBuzz
operation       @
identifier      FizzBuzzBazzFoo
operation       @
identifier      sum_squares1
operation       @
identifier      sum_squares2
operation       @
identifier      sum_multiples
operation       @
identifier      prime_factors
operation       @
identifier      compute_primes
parenthesis     (
number          0d1000
parenthesis     )
operation       @
identifier      compute_primes_alt
parenthesis     (
number          0d1000
parenthesis     )
operation       @
identifier      compute_pi
parenthesis     (
number          0d1000
parenthesis     )
bracket         ]
keyword         loop
identifier      f
keyword         in
identifier      functions
brace           {
identifier      print
parenthesis     (
string          'Function: '
operation       +
operation       @
identifier      f
operation       .
identifier      name
parenthesis     )
identifier      f
parenthesis     (
parenthesis     )
identifier      print
parenthesis     (
string          '\n\n'
parenthesis     )
brace           }
identifier      twelve_days_of_christmas
parenthesis     (
parenthesis     )
operation       =
brace           {
identifier      gifts
operation       =
bracket         [
string          "first"
operation       ->
string          "A partridge in a pear tree"
string          "second"
operation       ->
string          "Two turtle doves"
string          "third"
operation       ->
string          "Three french hens"
string          "fourth"
operation       ->
string          "Four calling birds"
string          "fifth"
operation       ->
string          "Five golden rings"
string          "sixth"
operation       ->
string          "Six geese a laying"
string          "seventh"
operation       ->
string          "Seven swams a swimming"
string          "eighth"
operation       ->
string          "Eight maids a milkin"
string          "ninth"
operation       ->
string          "Nine ladies dancing"
string          "tenth"
operation       ->
string          "Ten lords a-leaping"
string          "eleventh"
operation       ->
string          "Eleven pipers piping"
string          "twelfth"
operation       ->
string          "Twelve drummers drumming"
bracket         ]
identifier      start
operation       =
string          "On the "
identifier      middle
operation       =
string          " day of Christmas,\nMy true love gave to me\n"
keyword         loop
identifier      day
keyword         in
identifier      gifts
brace           {
identifier      print
parenthesis     (
identifier      start
operation       +
identifier      day
operation       +
identifier      middle
parenthesis     )
keyword         loop
identifier      day_num
separator       ,
identifier      gift
keyword         in
identifier      gifts
operation       .
identifier      keys
separator       ,
identifier      gifts
operation       .
identifier      values
brace           {
keyword         if
identifier      day
operation       not?
string          "first"
operation       and
identifier      day_num
operation       =?
string          "first"
identifier      print
parenthesis     (
string          "And"
operation       +
identifier      gift
operation       .
identifier      lowercase
parenthesis     )
keyword         else
identifier      print
parenthesis     (
identifier      gift
parenthesis     )
brace           }
brace           }
brace           }
identifier      FizzBuzz
parenthesis     (
parenthesis     )
operation       =
brace           {
identifier      words
operation       =
bracket         [
number          0d3
operation       ->
string          "Fizz"
number          0d5
operation       ->
string          "Buzz"
bracket         ]
keyword         loop
identifier      i
keyword         in
number          0d1
operation       :
number          0d100
brace           {
identifier      say
operation       =
identifier      i
operation       .
operation       %
identifier      words
operation       .
identifier      keys
operation       .
operation       =?
number          0d0
keyword         if
identifier      words
operation       .
identifier      keys
bracket         [
identifier      say
bracket         ]
operation       .
identifier      length
operation       >?
number          0d0
brace           {
keyword         loop
identifier      word
keyword         in
identifier      words
bracket         [
identifier      words
operation       .
identifier      keys
bracket         [
identifier      say
bracket         ]
bracket         ]
identifier      printf
parenthesis     (
identifier      word
parenthesis     )
brace           }
keyword         else
identifier      printf
parenthesis     (
identifier      i
parenthesis     )
identifier      print
parenthesis     (
parenthesis     )
brace           }
brace           }
identifier      FizzBuzzBazzFoo
parenthesis     (
parenthesis     )
operation       =
brace           {
keyword         loop
identifier      i
keyword         in
number          0d1
operation       :
number          0d100
keyword         match
identifier      i
operation       %
number          0d3
separator       ,
identifier      i
operation       %
number          0d5
separator       ,
identifier      i
operation       %
number          0d7
separator       ,
identifier      i
operation       %
number          0d11
brace           {
number          0d0
separator       ,
identifier      _
separator       ,
identifier      _
separator       ,
identifier      _
brace           {
identifier      printf
parenthesis     (
string          'Fizz'
parenthesis     )
keyword         continue
brace           }
identifier      _
separator       ,
number          0d0
separator       ,
identifier      _
separator       ,
identifier      _
brace           {
identifier      printf
parenthesis     (
string          'Buzz'
parenthesis     )
keyword         continue
brace           }
identifier      _
separator       ,
identifier      _
separator       ,
number          0d0
separator       ,
identifier      _
brace           {
identifier      printf
parenthesis     (
string          'Bazz'
parenthesis     )
keyword         continue
brace           }
identifier      _
separator       ,
identifier      _
separator       ,
identifier      _
separator       ,
number          0d0
identifier      printf
parenthesis     (
string          'Foo'
parenthesis     )
operation       not?
number          0d0
separator       ,
operation       not?
number          0d0
separator       ,
operation       not?
number          0d0
separator       ,
operation       not?
number          0d0
identifier      printf
parenthesis     (
identifier      i
parenthesis     )
brace           }
identifier      print
parenthesis     (
parenthesis     )
brace           }
identifier      sum_squares1
parenthesis     (
parenthesis     )
operation       =
brace           {
identifier      sum_squares
operation       =
bracket         [
identifier      i
operation       ^
number          0d2
keyword         loop
identifier      i
keyword         in
number          0d1
operation       :
number          0d100
bracket         ]
operation       .
identifier      sum
identifier      square_sum
operation       =
parenthesis     (
number          0d1
operation       :
number          0d100
parenthesis     )
operation       .
identifier      sum
operation       ^
number          0d2
identifier      print
parenthesis     (
identifier      sum_squares
operation       -
identifier      square_sum
parenthesis     )
brace           }
identifier      sum_squares2
parenthesis     (
parenthesis     )
brace           {
identifier      sum_squares
operation       =
number          0d1
operation       ^
number          0d2
operation       +
number          0d2
operation       ^
number          0d2
operation       +
number          0d3
operation       ^
number          0d2
operation       +
operation       ...
operation       +
number          0d100
operation       ^
number          0d2
identifier      square_sum
operation       =
parenthesis     (
number          0d1
operation       +
number          0d2
operation       +
number          0d3
operation       +
operation       ...
operation       +
number          0d100
parenthesis     )
operation       ^
number          0d2
identifier      print
parenthesis     (
identifier      sum_squares
operation       -
identifier      square_sum
parenthesis     )
brace           }
identifier      sum_multiples
parenthesis     (
parenthesis     )
operation       =
brace           {
identifier      sum
operation       =
number          0d0
keyword         loop
identifier      i
keyword         in
number          0d1
operation       :
number          0d1000
operation       -
number          0d1
keyword         if
parenthesis     (
identifier      i
operation       %
number          0d3
operation       *
identifier      i
operation       %
number          0d5
parenthesis     )
operation       =?
number          0d0
identifier      sum
operation       +
operation       =
identifier      i
identifier      print
parenthesis     (
identifier      sum
parenthesis     )
brace           }
identifier      prime_factors
parenthesis     (
parenthesis     )
operation       =
brace           {
identifier      goal
operation       =
number          0d600851475143
identifier      primes
operation       =
identifier      doublylinkedlist
bracket         [
number          0d2
number          0d3
bracket         ]
hashtag         #loop1
keyword         loop
identifier      i
keyword         in
bracket         [
number          0d5
number          0d7
operation       ...
identifier      goal
operation       ^
operation       /
number          0d2
bracket         ]
brace           {
keyword         loop
identifier      p
keyword         in
identifier      primes
keyword         if
identifier      i
operation       %
identifier      p
operation       =?
number          0d0
keyword         continue
hashtag         #loop1
identifier      primes
operation       .
identifier      append
parenthesis     (
identifier      i
parenthesis     )
brace           }
identifier      print
parenthesis     (
identifier      primes
bracket         [
operation       -
number          0d0
bracket         ]
parenthesis     )
brace           }
identifier      compute_primes
parenthesis     (
identifier      n
parenthesis     )
operation       =
brace           {
keyword         if
identifier      n
operation       <?
number          0d1
identifier      throw
identifier      ValueError
parenthesis     (
string          'there is no [n]th prime'
parenthesis     )
keyword         if
identifier      n
operation       =?
number          0d1
brace           {
identifier      print
parenthesis     (
bracket         [
number          0d2
bracket         ]
parenthesis     )
keyword         return
brace           }
keyword         if
identifier      n
operation       =?
number          0d2
brace           {
identifier      print
parenthesis     (
bracket         [
number          0d2
number          0d3
bracket         ]
parenthesis     )
keyword         return
brace           }
identifier      primes
operation       =
identifier      doublylinkedlist
bracket         [
number          0d2
number          0d3
bracket         ]
hashtag         #outer
keyword         loop
identifier      candidate
keyword         in
bracket         [
number          0d5
number          0d7
operation       ...
bracket         ]
brace           {
hashtag         #inner
keyword         loop
identifier      p
keyword         in
identifier      primes
brace           {
keyword         if
identifier      candidate
operation       %
identifier      p
operation       =?
number          0d0
keyword         continue
hashtag         #outer
brace           }
identifier      primes
operation       .
identifier      append
parenthesis     (
identifier      candidate
parenthesis     )
keyword         if
identifier      primes
operation       .
identifier      length
operation       =?
identifier      n
keyword         break
hashtag         #outer
brace           }
identifier      print
parenthesis     (
identifier      primes
parenthesis     )
brace           }
identifier      compute_primes_alt
parenthesis     (
identifier      uint
identifier      n
parenthesis     )
brace           {
keyword         match
identifier      n
brace           {
number          0d0
identifier      throw
identifier      ValueError
parenthesis     (
string          'there is no 0th prime'
parenthesis     )
number          0d1
brace           {
identifier      print
parenthesis     (
bracket         [
number          0d2
bracket         ]
parenthesis     )
keyword         return
brace           }
number          0d2
brace           {
identifier      print
parenthesis     (
bracket         [
number          0d2
number          0d3
bracket         ]
parenthesis     )
keyword         return
brace           }
identifier      _
brace           {
identifier      primes
operation       =
identifier      doublylinkedlist
bracket         [
number          0d2
number          0d3
bracket         ]
hashtag         #outer
keyword         loop
identifier      candidate
keyword         in
bracket         [
number          0d5
number          0d7
operation       ...
bracket         ]
brace           {
keyword         loop
identifier      p
keyword         in
identifier      primes
keyword         if
identifier      candidate
operation       %
identifier      p
operation       =?
number          0d0
keyword         continue
hashtag         #outer
identifier      primes
operation       .
identifier      append
parenthesis     (
identifier      candidate
parenthesis     )
keyword         if
identifier      primes
operation       .
identifier      length
operation       =?
identifier      n
keyword         break
hashtag         #outer
brace           }
identifier      print
parenthesis     (
identifier      primes
parenthesis     )
brace           }
brace           }
brace           }
identifier      compute_pi
parenthesis     (
identifier      n
parenthesis     )
operation       =
brace           {
identifier      iterations
operation       =
identifier      ceiling
parenthesis     (
identifier      n
operation       /
number          0d14.181647462725477655
parenthesis     )
identifier      num
identifier      pi
operation       =
number          0d0
identifier      pi
operation       .
identifier      precision
operation       =
identifier      n
keyword         loop
identifier      k
keyword         in
number          0d0
operation       :
identifier      iterations
brace           {
identifier      pi
operation       +
operation       =
parenthesis     (
operation       -
number          0d1
parenthesis     )
operation       ^
identifier      k
operation       *
parenthesis     (
number          0d6
operation       *
identifier      k
parenthesis     )
operation       !
operation       /
parenthesis     (
parenthesis     (
identifier      k
operation       !
parenthesis     )
operation       ^
number          0d3
operation       *
parenthesis     (
number          0d3
operation       *
identifier      k
parenthesis     )
operation       !
parenthesis     )
operation       *
parenthesis     (
parenthesis     (
number          0d13591409
operation       +
number          0d545140134
operation       *
identifier      k
parenthesis     )
operation       /
number          0d640320
operation       ^
parenthesis     (
number          0d3
operation       *
identifier      k
parenthesis     )
parenthesis     )
brace           }
identifier      pi
operation       =
parenthesis     (
number          0d10005
operation       ^
operation       /
number          0d2
operation       /
number          0d4270934400
operation       *
identifier      pi
parenthesis     )
operation       ^
operation       -
number          0d1
identifier      print
parenthesis     (
identifier      pi
operation       .
identifier      string
bracket         [
operation       :
identifier      n
bracket         ]
parenthesis     )
brace           }
