// examples of bugs (or just unimplemented stuff) that currently exist in the tokenizer/parser/etc.


// expressions with prefix or postfix operators can't be juxtaposed
// really only matters for unary operators that aren't binary operators
// backtick "`" and at "@" are really the only two that matter
a=10
b = [1,2 3,4]
c = a@10
d = b`a
// honestly though these are pretty un-idiomatic, and perhaps the best solution would be to identify these cases and say they're ambiguous

// juxtapose with unary operators gets lost
// seems like it could be a design decision at the moment, but I think it might actually be something to fix
arr = [1,2 3,4]
//juxtapose gets lost in these cases. ideally the juxtapose would remain since ` and ... and .. are whitespace sensitive
`/arr
../arr
.../arr



// precedence ambiguity between `.` and `()`.
//should obviously be access first, then call due to left to right associativity
// this one is fixable by adding slight float offsets to the operator precedences in the parser
obj = [
    fn = x => x * 2
]
printl(obj.fn(5))

// this one will require type checking to verify myfn is a callable rather than a multipliable
myfn = () => [
    x = 5
]
printl(myfn().x)