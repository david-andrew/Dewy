/{
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
}/

main
{
    goal = 600851475143
    
    primes = [2 3].doublylinkedlist //doubly linked list (generic sized object, space can adjust for larger values)
    //example empty init [].dll(uint64) makes a doubly linked list fileled with uint64's
    //uint.fit(goal) -> returns uint64, the smallest uint that goal will fit within
    //uint.fit(goal^0.5) returns uint32
    
    //primes.append([2 3])

    #loop1 loop i in [5 7 ... sqrt(goal)]   //count by 2 starting from 5 up to sqrt(goal)
    {
        loop p in primes
            if i % p =? 0 continue #loop1 //continue the loop governed by i
        
        primes.append(i)
    }
    
    print(primes[-0])
    
    //note that while arrays can be set to be indexed with arbitrary start and end indices, if an index is accessed using +value or -value (e.g. primes[+10] or primes[-12]), the indexing is forced to be zero // actually this is no longer true. if indexing is not 0 based, then all values up to the first legal index are simply out of bounds for both + and - indexing. e.g. a = int[10:20], then a[10] is the first element, a[-10] is the last element, and any number < 10 or > 20 is out of bounds 
    //i.e. if primes was set to start at 1, primes[+0] will return the first element, even if primes[0] would throw an error
    //indexing with a '+' indicates indexing from the start. indexing with a '-' indicates indexing from the end
    //the index value i means the ith value precisely, none of this in between mumbo jumbo.
    //e.g. if you want the last 10 elements in a = 0:20, then a[-9:-0]
    //"start" and "end" can be used to refer to indices +0 and -0 respectively. e.g. it is legal to say a[end-9:end-0], and calling a[-9:-0] implicitely includes the "end"s

}