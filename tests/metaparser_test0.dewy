//Testing Char rules
#char0 = "A";
#char1 = "\X23";
#char2 = "\n";
#char3 = "\"";
#char4 = '\'';
#char5 = "'";
#char6 = '"';
#char7 = "\\";

//testing eps rules
#eps0 = \e;
#eps1 = "";
#eps2 = '';
#eps3 = ϵ;


//testing string rules
#string0 = "this is a string";
#string1 = 'this is also a string';
#string2 = "this string doesn't have escapes, but it does have internal single quotes (')";
#string3 = "this string has escapes\n\tfollowed by more text";
#string4 = "this string has hex: \x1f98A\n";


//testing anyset
#anyset0 = \U;
#anyset1 = \u;
#anyset2 = \X;
#anyset3 = \x;
#anyset4 = U;
#anyset5 = V;
#anyset6 = ξ;

//testing hex numbers
#hex0 = \x1234;
#hex1 = \XeFab4D;
#hex2 = \U0;
#hex3 = \uffff;

//testing identifiers
#id0 = #id0;
#id1 = #thudhkjsdh;
#id2 = #idhf3893#u~8!@VS#F9?;

//testing star expressions
#star0 = "A"*;
#star1 = "string"*;
#star2 = \e*;
#star3 = ""*;
#star4 = ''*;
#star5 = ϵ*;
#star6 = \U*;
#star7 = \x1234*;
#star8 = #identifier*;
#star9 = "A"**;
#star10 = "A"5*;
#star11 = "string"50*;
#star13 = ""05*;
#star14 = ''12*;
#star15 = ϵ4096*;
#star19 = "A"13*12*;
#star20 = "Apple"5*5*5*5*5*;

//testing plus
#plus0 = "A"+;
#plus1 = "string"+;
#plus2 = \e+;
#plus3 = ""+;
#plus4 = ''+;
#plus5 = ϵ+;
#plus6 = \U+;
#plus7 = \x1234+;
#plus8 = #identifier+;
#plus9 = "A"++;
#plus10 = "A"5+;
#plus11 = "string"50+;
#plus13 = ""05+;
#plus14 = ''12+;
#plus15 = ϵ4096+;
#plus19 = "A"13+12+;
#plus20 = "Apple"5+5*5+5*5+;

//testing option
#plus0 = "A"?;
#plus1 = "string"?;
#plus2 = \e?;
#plus3 = ""?;
#plus4 = ''?;
#plus5 = ϵ?;
#plus6 = \U?;
#plus7 = \x1234?;
#plus8 = #identifier?;
#plus9 = "A"??;
#plus10 = "A"5+?;
#plus11 = "string"50+?;
#plus13 = ""05*?;
#plus14 = ''12+?;
#plus15 = ϵ4096+?;
#plus19 = "A"13+?12+;
#plus20 = "Apple"5+5*?5+5*5+?;

//testing count
#plus0 = "A"343;
#plus1 = "string"123;
#plus2 = \e 1245;
#plus3 = ""1233;
#plus4 = ''89749;
#plus5 = ϵ13;
#plus6 = \U 124;
#plus7 = \x1234 2312;
#plus8 = #identifier 123;
#plus9 = "A" 123 123;

//testing compliment
#comp0 = "A"~;
//#comp1 = [Z]~;
#comp2 = \U~;
#comp3 = "\\"~;

//testing grouping
#group0 = ("A");
#group1 = (\U*);
#group2 = ("this is a string"3);
#group3 = (("multiple parenthesis"));
#group4 = (ϵ)+;
#group5 = (("A")+)?;


//TODO->test or with count-star to verify that restoring the tokens from the star expression when reading the star/number tokens on the first pass
//#starfail0 = "A" | "B"12*;

//silly test idea: have a rule with an absurd number of matching parenthesis, i.e. GBs worth
//#memory_testϵ


//testing capture
#capture0 = {"A"};
#capture1 = {\U*};
#capture2 = {"this is a string"3};
#capture3 = {{"multiple parenthesis"}};
#capture4 = {ϵ}+;
#capture5 = {{"A"}+}?;


//testing cat
#cat0 = "A" "B";
#cat1 = ("string"*) "banana"+;
#cat2 = {ϵ}+ \x123 #identifier 123;
#cat3 = 'a' ' ' 'b' 'u' 'n' 'c' 'h' ' ' 'o' 'f' ' ' 'i' 'n' 'd' 'i' 'v' 'i' 'd' 'u' 'a' 'l' ' ' 'c' 'h' 'a' 'r' 'a' 'c' 't' 'e' 'r' 's';
#cat4 = (((ξ \x1) (\x2 \x3)) (\x4 \x5)) \x6 ξξ;

#error = (ξ \x1 \x2 \x3 \x4 \x5 \x6 ξξ ;


//testing charsets
#charset0 = [abcdefgilmnprt];
#charset1 = [A-Za-z0-9];
#charset2 = [a-zA-Z0-9~!@#$&_?];
#charset3 = [a - zA- Z0-9 ~!@ #$&
_?];
#wschar = [\x9-\xD\x20\x85\xA0\x1680\x2000-\x200A\x2028\x2029\x202F\x205F\x3000];
#charset4 = [uUxX] [0-9a-fA-F]+ [VUξ] \U [\-\[\]];


//testing or
#or0 = "A" | "B";
#or1 = ξ | ϵ;
#or2 = "A" ξ | ϵ | #or1* [A-Za-z0-9]+;

//testing reject
#reject0 = ξ - [A-Za-Z0-9];
#reject1 = ξ - [A-Za-Z0-9] | ϵ;
#reject1 = ξ* - [A-Za-z0-9]* - "apple" | ϵ;
#reject1 = ξ - [A-Za-z0-9] - "q";
#reject1 = ξ - ([A-Za-z0-9] - "q");
