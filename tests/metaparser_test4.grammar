//Simple example of an ambiguous grammar that uses disambiguation rules

#wschar = [\x9-\xD\x20];
#line_comment = '/' '/' (\U - '\n')* '\n';
#ws = (#wschar | #line_comment)*;


//numeric expressions
#identifier = [A-Za-z] [0-9A-Za-z]*;
#number = [0-9]*;
#addition = #expression #ws '+' #ws (#expression - #addition);
#subtraction = #expression #ws '-' #ws (#expression - #subtraction);
#multiplication = #expression #ws '*' #ws (#expression - #multiplication);
#division = #expression #ws '/' #ws (#expression - #division);
#exponent = (#expression - #exponent) #ws '^' #ws #expression;
#numeric_expression = #identifier | #number < #addition | #subtraction < #multiplication | #division < #exponential;

//boolean expressions
#boolean_literal = 'true' | 'false';
#greaterthan = (#expression - #boolean_expression) #ws '>' #ws (#expression - #boolean_expression);
#lessthan = (#expression - #boolean_expression) #ws '<' #ws (#expression - #boolean_expression);
#equals = (#expression - #boolean_expression) #ws '==' #ws (#expression - #boolean_expression);
#boolean_expression = #boolean_literal | #greaterthan | #lessthan | #equals;

//string expression
#string_expression = '"' (ξ - '"')* '"';
#string_expression = "'" (ξ - "'")* "'";

//function expression
#function_arguments = ('(' (#ws #identifier #ws (',' #ws #identifier #ws)*)? ')');
#function_arguments = #identifier;
#function_body = #expression | #block;
#function_expression = #function_arguments #ws '=>' #ws #function_body;

//statements
#assignment = #identifier #ws '=' #ws #expression ';';
#if = 'if' #ws #boolean_expression #ws #statement (#ws 'else' #ws #statement)?;
#block = '{' (#ws (#statement | #expression))* #ws '}';
#function_call = #identifier '(' ((#ws #identifier) (#ws ',' #ws #identifier))? #ws ')';


#expression = #boolean_expression | #numeric_expression | #string_expression | #function_expression | #function_call;
#statement = #assignment | #if | #block | #function_call;



#program = (#ws (#statement | #expression))* #ws;

#start = #program;