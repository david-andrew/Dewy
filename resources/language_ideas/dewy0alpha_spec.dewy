/{
This document specifies features for my first basic interpreter

The interpreter will only perform inline mathematical operations. This includes:
-addition					[+]
-subtraction				[-]
-multiplication				[*]
-division					[/]
-modulus					[%]
-exponentiation				[^]
-parenthesis				[()]

Boolean math operations:
-and						[and]
-or							[or]
-xor						[xor]
-not						[not]
-nand						[nand]
-nor						[nor]
-xnor						[xnor]

Boolean shift operators:
-logical shift left			[<<]
-logical shift right		[>>]
-arithmetic shift left		[<<]
-arithmetic shift right		[>>]
(note that the difference between logical and arithmetic is the data type.
i.e. unsigned integers are logically shifted, and signed integers are arithmetically shifted)
(potentially support floats by multiplying by 2^n. probably not though to ensure this is a "bit operation")
-rotate through carry left	[<<<!]
-rotate through carry right	[!>>>]
-rotate (no carry) left		[<<<]
-rotate (no carry) right	[>>>]

(rotate no/through carry operations will be separate symbol)

Comparison operators:
-equality					[=?]
-inequality					[not?] or [not =?]
-greater than				[>?] or [not <=?]
-greater than/equal			[>=?] or [not <?]
-less than					[<?] or [not >=?]
-less than/equal			[<=?] or [not >?]


Input values will be able to be integer or real.

In addition, the interpreter will support units for the values. All units will be metric:
-meter 						[m]
-kilogram					[kg]
-second						[s]
-ampere						[A]
-kelvin						[K]
-mole						[mol]
-candela					[cd]

Support for derived units will also be included (though maybe not in the initial builds):
-radian						[rad]
-steradian					[sr]
-hertz						[Hz]
-newton						[N]
-pascal						[Pa]
-joule						[J]
-watt						[W]
-coulomb					[C]
-volt						[V]
-farad						[F]
-ohm						[Om] (instead of Ω (greek capital omega) or Ω (ohm symbol))
-weber						[Wb]
-tesla						[T]
-henry						[H]
-Celsius					[dC] ? [C]
-lumen						[lm]
-lux						[lx]
-sievert					[Sv]

In addition to units, SI prefixes will also be included:
-exa						[E]		(10^18)
-peta						[P]		(10^15)
-tera						[T]		(10^12
-giga						[G]		(10^9)
-mega						[M]		(10^6)
-kilo						[k]		(10^3)
-milli						[m]		(10^-3)
-micro						[u]		(10^-6) (instead of mu, or μ)
-nano						[n]		(10^-9)
-pico						[p]		(10^-12)
-femto						[f]		(10^-15)
-atto						[a]		(10^-18)


Physical Constants to be included (callable by name)
-pi									(3.14159...)
-e									(2.71828...)
-g									(9.81 m/s^2)
-<other constants?>


Typing "reserved" will list out all of the reserved words in the language (calculator)



Will attempt to make support for writing units in their symbol form (km, mm, kA, etc.), but will definitiely support writing the prefix/unit out in english

The interpreter should recognize mismatches in units. Mismatches can only occur for addition and subtraction

(probably?) No exception will be made for the kilogram. Initially the interpreter will not know what a gram is, and so units such as megagrams, gigagrams, etc. will not be possible. Instead the prefix will be added in front of the base kilogram, e.g. kilokilogram



Another concept that I want to handle in the interpreter and the language as a whole is significant figures
-when specifying numbers, the precisions is recorded
-mathematical operations follow the rules of significant figures. The numerical reprisentation is the same technically, but an extra marker will track how many digits are significant, or provide an interval for the certainty of the number. In the language, this should be something optional that the user turns on for a given variable
-eventually want to be able to capture error propigation in computation. probably won't include this in the interpreter though

Also want to handle how printing works differently from rust
-everything thrown into the print function should have some sort of defualt representation
--i.e. if you make an enumeration, it can be thrown into print, and the details of the enum will be printed
--the enumeration will not require you to implement to string to print something, unless you want it to look different / more speci




The interpreter format will be the same as the python interpreter
>>> <regular statement>
<result>
>>> <multiline statement
... end multiline statement>
<result>

(multiline statements will not be possible in this version)

}/


/{
steps for writing the parser:
1. basic int math parser (all operations)
2. float support to parser
3. SI unit parser (units only)
4. SI unit and prefix parser
5. combine math and prefix parser
}/


/{
other notes:
every operation result will be saved into a temporary variable ans
operations can ignore the first value, and will instead use the value in ans

>>> 15 kg
15 kilgograms
>>> * 9.81 m/s^2
147.15 Newtons


comparisons will convert units

>>> 1000 milliseconds =? 1 second
true
>>> 100 meters =? 100 kg
false
>>> 1.00000001 kilonewtons =? 1000 newtons
true 	// float comparison returns true for epsilon < 0.000001 //this might be an actual message output
		
}/



/{Examples of possible inputs that should parse}/

//simple values

>>> 1
>>> 10
>>> 15.78
>>> 7.6543e34567

//value unit pair
>>> 10 meters
>>> 65 kg




/{
	The interpreter should store tokens in a linked list which it operates on by simplifying each section until only a single element remains in the list. that single element is then the result that is displayed.
}/