//generating a random floating point number strategy:

//rand function will be highly overloaded as well as 
//use block function for body of algorithm? or if implementations are different enough each, implement separately


//need to figure out generics, and restricted or semi-generics. 
//generics would work like regular generics where any type can be used (with the possibility to require that that type has certain functionalities or properties)
//restricted generics would be where you can specify a set of types that can be used



//declare so available in all calls to rand()
distributions = enum [uniform gaussian beta log lognormal poisson ...]	//better notation for enums?



rand()
{}

rand(type){}

//rand(type upper){}

rand(type lower, type upper){}

rand(type, token distribution, [distribution parameters]){}

//use token for function variables that will be interpreted in the namespace of the function. so if there is an enum for the different types of distributions that the rand function can use, then the token passed in can be plain text listing the distribution e.g. "gaussian" (without the quotes) and even if the enum isn't defined in the main program, the definition is pulled from the function namespace

a = rand(real64, gaussian, mean=0, std=1)	//"gaussian" may not be declared in the scope, but is declared in the definition of rand


//e.g.
rand(real32 lower, real32 upper)
{
    
    \{ This is an example of a doc comment (notice the back-slash instead of forward-slash) }\ 
    \{
        This function demonstrates creation of a random floating point value
        
        inputs:
        -lower, the lower bound of the range to select the number from
        -upper, the upper bound of the range to select the number from
        
        return:
        -val, the random floating point value within the range
        
        notes:
        -this function is considered unsafe in rust
    }\
    
    //error checking. maybe allow lower > upper by swapping
    assert upper >? lower   //do we need the ? in >? for assert statements?
    {
		error("lower bound ({}) is larger than upper bound ({})", lower, upper)
		//note that inside the function, there is only one arguement the string
		//the comma separated arguements are part of a string expression which returns a string with the values replaced in the specific locations
	}
	
	
    range = upper - lower
    
    //generate random 32-bit unsigned integer
    val = rand(uint32) 	//alternatively call rand(real32) and skip the transmute step
    
    //transmute uint32 val to a real32, keeping the same underlying data
    val = val transmute real32
    
    //get random number within range specified
    val = val % range
    
    //alternatively, could do val = upper - val
    val = val + lower
    
    return val
}
