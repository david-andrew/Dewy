//Project Euler Problem 1

/{
	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

	Find the sum of all the multiples of 3 or 5 below 1000.
}/

run main() =
{
    //the less specific you are, the slower it will run
    //this is because it will do more work in the background to make the interface nice for the user
    //e.g. no datatype will scale to fit as much data as needed
    
    sum = 0     // least specific
    
    loop i in 1:1000-1
        if i%3 =? 0 or i%5 =? 0
            sum+=i
            
    print(sum)
}


/{
//expanding out what the parse tree will contain
main() = 
{
    sum = 0
    
    //scope to contain loop parameters (i)
    {
        i=1
        _step=1
        _end=1000-1
        loop({ i = i + _step; return i<=?_end }) //this isn't technically correct syntaxt, just how it behaves. sort of a mix between correct syntax and the AST 
        {
            if i%3 =? 0 or i%5 =? 0
            {
                sum = sum + i
            }
        }
    }
}


//Full AST of the original function expanded out
(def)
    name:main
    args:[]
    body:[
        (assignment)
            name:sum
            value:0
        (loop)
            condition:(in)
                iterator:i
                list:(interval)
                    start:1
                    end:(-)
                        1000
                        1
                    step:1 //implicit
            body:[
                (if)
                    condition:(or)
                        (=?)
                            (%)
                                i
                                3
                            0
                        (=?)
                            (%)
                                i
                                5
                            0
                    body:[
                        (assignment)
                            name:sum
                            value:(+)
                                sum
                                i
                    ]
            ]
            (call)
                name:print
                args:[sum]
    ]

(call)
    name:main
    args:[]


}/