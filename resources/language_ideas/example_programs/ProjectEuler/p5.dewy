/{
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
}/

main
{
    factors = [int].dll
    loop i in 2:20
        factors = combine_pfactors(factors, pfactorize(i))
    
    total = 1
    loop v in factors total *= v
    
    print(total)
}


primes = [2 3].dll  //list of all the prime numbers


//probably redo this function to return a dictionary with the factor and multiplicity. 
//then can easily make a list by loop i in dict.key loop j in 1:dict[i] list.append(dict[i])
pfactorize(int num)
{
    \{
    Compute the prime factorization of the input number. If the prime factor has a multiplicity greater than 1, it will be copied multiple times in the output list

    inputs:
        num - the value to be factorized
        primes - assumes a global sorted doubly linked list of prime numbers exists (and has at least the values 2 and 3 included)
        
    outputs:
        factors - a list of the prime factors of num
    }\
    
    //if not enough prime factors, add more to the list
    update_primes_list(num)
    
    
    factors = [].dll
    
    loop p in primes
        loop num % p =? 0
        {
            factors.append(p)
            num /= p
        }
    
    return factors


}

update_primes_list(num)
{
    //update the primes list to contain prime factors up to sqrt(num)
    #loop1 loop i in primes[-0]+2 : num^.5 : 2  
    //list will be empty if enough primes are present
    {
        //check if current i is prime
        loop p in primes
            if i % p =? 0 continue #loop1
        
        primes.append(i)    //add to list of primes
    }
    
}


combine_pfactors(copy [int].dll list1, copy [int].dll list2)
//if the variable is not captured when passed to the function, then copy uses the original
{
    //combine the lists of prime factors
    
    combined = [int].dll
    
    //currently combines without ensuring proper multiplicity
    loop list1.length not? 0 and list2.length not? 0
    {
        if list1[0] =? list2[0]
        {
            combined.append(list1.remove(0))
            list2.remove(0)
        }
        else if list1[0] <? list2[0] combined.append(list1.remove(0))
        
        else combined.append(list2.remove(0))
    }
    
    loop list1.length not? 0
        combined.append(list1.remove(0))
        
    loop list2.length not? 0
        combined.append(list2.remove(0))
        
}