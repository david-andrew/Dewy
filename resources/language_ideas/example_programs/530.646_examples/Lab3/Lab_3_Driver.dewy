// Main driver for 530.646 lab 3 written in dewy-speak
//need to fix all indices which are currently 1 based

settings    //should be able to call settings predefined elsewhere
{
    //a series of settings. some are set to their default, but included here to show what they are
    index_mode = 1      //all list indexes start at 1    
    auto_print = true   //automatically print \n and \t for new sections and indents into blocks
    vector_mode = col   //alternate: row. sets the direction of the first dimension in vector space to colum vectors 
    handedness = right  //alternate: left. makes i cross j = k, using right hand (left handed i cross j = k is still true, just k will be defined left handedly)
    print_uncaptured_expressions = false    //equivalent to matlabs surpression of statements
    
    
    //do we allow lists that have size 0 in a dimension to skip that index? e.g. if a is a [1 2 3 4 ... 10]  (which has size 1 in dim 1 and 10 in dim 2), is a[5] = 5, or is it not defined, and has to be accessed as a[1,5]?
    //allow defining lists by pattern [1 2 3 ... 10]
    //actually use haskell list comprehensions for patterns
}

//math terms in plain english
k = i cross j   //in the IDE, cross will become the X symbol
c = a dot b     //and dot will become the <solid dot> symbol
//e = f circle g //compose functions? probably not needed...

//alternatively can say "set <setting_var> = <value>" without having the settings{} block

rosshutdown
rosinit
ur5 = ur5_interface


#Part3a // Forward Kinematic Map Verification
{
    // redefine base frame position based off of construction the ur5 configuration from assignment 4 number 2 is defined as gst0
    tf_frame("base_link", "base", [ ROTZ(pi/2 rad) [0 0 0.0892]' meters; 0 0 0 0 ])
    pause(1 second)

    print("Beginning testing of ur5FwdKin() function:")

    loop i in 1:4
    {
        //do while loop
        {
            //is it better to do rand(-pi,pi)[6] or rand[6](-pi,pi) or [6]rand(-pi,pi) or something else
            //also how to initialize with a specific list of args to call for each element in the output list?
            q = rand(-pi,pi)[6] radians     //generate random joint values within limits
            q[2] = -abs(q[2])               //force q2 to be positive (clockwise negative) so that it doesn't intersect the floor
            
            g = ur5FwdKin(q - ur5.home)
            
        } loop g[3,4] >? 0.1 meters         //check to make sure g is above the floor
        
        
        fwdKinToolFrame = tf_frame( "base", "fwdKinToolFrame", Identity[4] )
        fwdKinToolFrame.move_frame("base", g)
        
        //for generating screenshots
        //pause
        
        //make sure to hide tool0 and show ee_link
        ur5.move_joints(q, 7 seconds);
        pause(7.1 seconds)
        err = norm(ur5.get_current_transformation("base", "ee_link") - g)
        print("error between current position and forward map is {err}")    //automacitally tabbed in b/c within 1 scope (i.e. loop)
    }

    print("Finished testing of ur5FwdKin() function.")

}




#Part3b //Body Jacobian Verification
{
    print("Beginning testing of ur5BodyJacobian() function:")

    loop i in 1:10  //repeat verification 10 times
    {
        //generate random valid joints
        q = rand(-pi,pi)[6] radians

        g = ur5FwdKin(q)            //tranform at q
        J = ur5BodyJacobian(q)      //jacobain at q
        Japprox = zeros[6 6]       //matrix for jacobian approximation

        loop e_i in Identity[6]  //for each twist (iterating through the standard basis vectors in Real^6x6)
        //e_i is the ith standard basis vector in R^6. In the IDE, e_i will appear an 'e' with an 'i' subscript
        //Identity is the identity matrix for R^6. can also access through I[6]
        //Matrices are stored as lists of lists, so if e = I[6], then e[3] returns [0 0 1 0 0 0]'
        {
            dgdq_i = 1/2 / epsilon * ( ur5FwdKin( q + epsilon * e_i ) - ur5FwdKin( q - epsilon * e_i ) )
            xi_hat = rigid_inverse(g) * dgdq_i

            //twistify xi_hat, and insert into jacobian approximation
            Japprox[i] = vee(xi_hat)    //don't need Japprox[:,i] b/c A[i] (of a matrix A element of Real^n_by_n) the ith column of A

        }

        err = norm(J - Japprox)
        print("error between Jacobian and central difference approximation is {err}")
    }

    print("Finished testing of ur5BodyJacobian() function.")
}



#// Part 3 c) Manipulability Measure Verification
{
    {
        q = rand(-pi,pi)[6] radians
    } loop manipulability(ur5BodyJacobian(q), "invcond") >? 0.01


    //set the joints to a singular configuration (q3 = 0)
    q[3] = 0 radians

    pts = 100   //how many points to plot

    
    //for this section, want to be able to just call the manipulability functions in a single line, & return the lists
    //inline function calls?
    
    //need a good way to set up theta
    //q_3 = -pi/4 : pi/4 : /pts
    //linspace(-pi/4, pi/4, pts)
    //q_3 = space -pi/4 to pi/4 by pts  //potentially different keyword, but "split" range evenly into pts points
    //perhaps have a space() function like linspace
    
    theta = [ q[1:2] q_3 q[4:6] loop q_3 in linspace(-pi/4, pi/4, pts) ]  
    //maybe a:b:c not the same as matlab. the 3rd var is the number of points...
    
    //(-pi/4:pi/4)[pts]  ? matches function list generation...
    
    //figure out how to do the function call where ur5BodyJacobian(theta) returns a list
    //perhaps allow elements along extra dimensions to be interpreted as output an array of the size of the extra dimensions
    //user doesn't have to program extra functionality into the function to accept extra dimensions, it happens automatically
    sigmamin = manipulability(ur5BodyJacobian(theta), "sigmamin")
    detjac = manipulability(ur5BodyJacobian(theta), "detjac")
    invcond = manipulability(ur5BodyJacobian(theta), "invcond")
    
    
    //sigmamin = [manipulability(ur5BodyJacobian(q), "sigmamin") loop q in theta]
    //detjac = [manipulability(ur5BodyJacobian(q), "detjac") loop q in theta]
    //invcond = [manipulability(ur5BodyJacobian(q), "invcond") loop q in theta]
    

    figure
    {
        plot(theta[3,:], sigmamin)
        title("Minimum Sigma Near Singularity")
        xlabel("q3 angle (radians)")
        ylabel("manipulability")
    }
    
    figure
    {
        plot(theta[3,:], detjac)
        title("Jacobian Determinant Near Singularity")
        xlabel("q3 angle (radians)")
        ylabel("manipulability")
    }

    figure
    {
        plot(theta[3,:], invcond)
        title("Inverse of Condition Number Near Singularity")
        xlabel("q3 angle (radians)")
        ylabel("manipulability")
    }

        
}  



#Part3d // Twist from g Transform Verification
{
    print("Beginning testing of getXi() function:")

    loop i in 1:24
    {


        //generate a random twist
        xi = [rand(-1, 1)[3] m; rand(-2*pi, 2*pi)[3] rad];
        
        //occasionally force pure translation or pure rotation twists
        if i%3 =? 0 xi[1:3] = 0
        if i%3 =? 1 xi[4:6] = 0

        
        g = expm(wedge(xi))
        xi_comp = getXi(g)
        
        colinear = norm(proj(xi, xi_comp) - xi_comp)    //are xi and xi_comp colinear
        same_dir = proj(xi, xi_comp) dot xi >? 0      //are xi and xi_comp pointing in the same direction
        
        //compute twist angle, and correct for if xi and xi_comp are pointing opposite
        if same_dir angle_diff = norm(xi) - norm(xi_comp) rad
        else angle_diff = 2*pi - norm(xi) - norm(xi_comp) rad
            
        
        
        
        //display warnings if the returned values are different
        if colinear >? epsilon warning("Returned non-colinear twist")
        else if angle_diff >? epsilon warning("different twist angle returned.")
        
        
        print("error between input and computed twist is {}", max(colinear,angle_diff));
        

    }

    print("The instances where err is large are caused by the rotations occuring around axes rotated by 180 degrees.")
    print("I account for this with planer and pure rotation, but haven't figured out how to do so for general twists")
    print("Finished testing of getXi() function")
}



#Part3e // Resolved Rate Controller Test Validation
{
    print("Beginning testing of ur5RRcontrol() function.")

    K = 0.1    // gain for controller

    loop true
    {

        print("Attempting RR control")
        
        //move the ur5 to a start configuration with good manipulability
        if manipulability(ur5BodyJacobian(force_get_current_joints(ur5) - ur5.home), 'invcond') <? 0.01
        {
            //move the ur5 from the singular starting position
            ur5.move_joints(ur5.home + rand[6], 5 s)
            
            {
                jstart = rand(-pi,pi)[6] rad
                gs = ur5FwdKin(jstart)
                
                
            } loop gs[3,4] <? 0.1 meters 
            and sqrt(gs[2,4]^2 + gs[1,4]^2) <? 0.1 meters
            and manipulability(ur5BodyJacobian(jstart), 'invcond') <? 0.01
            //ensure selected transform is above the ground, not over the center, and not (nearly) singular
            
            pause(5 seconds)
        }
            
         


        {
            jfinal = rand(-pi,pi)[6] rad
            jfinal[2] = -rand*pi rad   //force the transform to be above the ground
            gf = ur5FwdKin(jfinal)
            
        
        } loop gf[3,4] <? 0.1 meters 
        and sqrt(gf[2,4]^2 + gf[1,4]^2) <? 0.3 meters
        and manipulability(ur5BodyJacobian(jstart), 'invcond') <? 0.01
        //ensure selected transform is above the ground, not over the center, and not (nearly) singular



        //display the goal frame in rvis
        Frame_goal = tf_frame("base", "Goal", gf)
        pause(0.3 seconds)


        //drive the arm to the goal transform
        finalerr = ur5RRcontrol(gf, K, ur5)

        if finalerr not? -1
        {
            print("Final distance to goal: {finalerr} cm")
            break   // exit loop on successful completion
        }
        else
        {
            print("Encountered singularity on trajectory. Retrying...")
            //stay in loop if unsuccessful
            pause(5 seconds)
        }


    }

    
    //need a good way to determine if do loop or scope
    {
        //demonstrate end at a singularity
        print("Attempting controller while starting at a singularity")

        jstart = ur5.home   // start at a singularity
        ur5.move_joints(jstart, 5 seconds)
        pause(5.1 seconds)

        jfinal = rand(-pi,pi)[6] rad   // end position


        gf = ur5FwdKin(jfinal)
        ur5RRcontrol(gf, K, ur5)   //this should necessarily fail

        print("Finished testing of ur5RRcontrol() function")
    }
}