/{
Notes:
- TBD if star/plus rules should have the expansion on the left or right of the content expression
--> currently expands to the right, but should program it to be easily swappable
}/

//#eps = 'ϵ' | '\\e | '""' | "''"
#eps = 'ϵ'
#eps = '\\' 'e'
#eps = '"' '"'
#eps = "'" "'"


//#wschar = [\x9-\xD\x20]
#wschar = [\x9-\xD\x20]


//#line_comment = '/' '/' (\U - '\n')* '\n'
#__0 = \U - '\n'
#__1 = #__0 #__1
#__1 = ϵ
#line_comment = '/' '/' #__1 '\n'


//#block_string = \U* - \U* '}/'
#__2 = \U
#__3 = #__2 #__3
#__3 = ϵ
#block_string = #__3
#block_string - #__3 '}' '/'


//#block_comment = '/' '{' (#block_comment | #block_string)* '}/'
#__4 = #block_comment
#__4 = #block_string
#__5 = #__4 #__5
#__5 = ϵ
#block_comment = '/' '{' #__5 '}' '/'


//#ws = (#wschar | #line_comment | #block_comment)*
#__6 = #wschar
#__6 = #line_comment
#__6 = #block_comment
#__7 = #__6 #__7
#__7 = ϵ
#ws = #__7


//#anyset = '\\' [uUxX]
#anyset = '\\' [uUxX]


//#hex = '\\' [uUxX] [0-9a-fA-F]+ / [0-9a-fA-F]
#__8 = [0-9a-fA-F]
#__9 = #__8 #__9
#__9 = ϵ
#hex = '\\' [uUxX] #__8 #__9
#hex / [0-9a-fA-F]

//#number = [0-9]+ / [0-9]
#__10 = [0-9]
#__11 = #__10 #__11
#__11 = ϵ
#number = #__10 #__11
#number / [0-9]

//#charsetchar = \U - [\-\[\]] - #wschar
#charsetchar = \U - [\-\[\]] - #wschar


//#item = #charsetchar | #escape | #hex
#item = #charsetchar
#item = #escape
#item = #hex


//#charset = '[' (#ws #item (#ws '-' #ws #item)? #ws)* ']'
#__12 = #ws '-' #ws #item
#__12 = ϵ
#__13 = #ws #item #__12 #ws
#__14 = #__13 #__14
#__14 = ϵ
#charset = '[' #__14 ']'


//#group = '(' #ws #expr #ws ')'
#group = '(' #ws #expr #ws ')'


//#capture = '{' #ws #expr #ws '}'
#capture = '{' #ws #expr #ws '}'


//#char = '"' (\U - '"' | #escape | #hex) '"'
//#char = "'" (\U - "'" | #escape | #hex) "'"
#__15 = \U - '"'
#__15 = #escape
#__15 = #hex
#__16 = \U - "'"
#__16 = #escape
#__16 = #hex
#char = '"' #__15 '"'
#char = "'" #__16 "'"


//#string = '"' (\U - '"' | #escape | #hex)2+ '"'
//#string = "'" (\U - "'" | #escape | #hex)2+ "'"
#__17 = #__15 #__17
#__17 = ϵ
#__18 = #__15 #__15 #__17
#__19 = #__16 #__18
#__19 = ϵ
#__20 = #__16 #__16 #__19
#string = '"' #__18 '"'
#string = "'" #__20 "'"


//#escape = '\\' \U
#escape = '\\' \U


//#star = #expr #ws (#number)? #ws '*'
#__21 = #number
#__21 = ϵ
#star = #expr #ws #__21 #ws '*'


//#plus = #expr #ws (#number)? #ws '+'
#plus = #expr #ws #__21 #ws '+'


//#option = #expr #ws '?'
#option = #expr #ws '?'


//#count = #expr #ws #number
#count = #expr #ws #number


//#compliment = #set #ws '~'
#compliment = #set #ws '~'


//#cat = #expr (#ws #expr)+
#__22 = #ws #expr
#__23 = #__22 #__23
#__23 = ϵ
#cat = #expr #__23


//#diff = #set #ws '-' #ws #set
#diff = #set #ws '-' #ws #set


//#intersect = #set #ws '&' #ws #set
#intersect = #set #ws '&' #ws #set


//#union = #set #ws '|' #ws #set
#union = #set #ws '|' #ws #set


//#or = (#expr #ws '|' #ws #expr) - #union
#or = #expr #ws '|' #ws #expr
#or - #union


//#set = #anyset | #char | #hex | #charset | #compliment | #diff | #intersect | #union
#set = #anyset
#set = #char
#set = #hex
#set = #charset
#set = #compliment
#set = #diff
#set = #intersect
#set = #union


//#expr = #eps | #set | #group | #capture | #string | #star | #plus | #option | #count | #cat | #or | #identifier
#expr = #eps
#expr = #set
#expr = #group
#expr = #capture
#expr = #string
#expr = #star
#expr = #plus
#expr = #option
#expr = #count
#expr = #cat
#expr = #or
#expr = #identifier


//#hashtag = '#' [a-zA-Z] [a-zA-Z0-9~!@#$&_?]* / [a-zA-Z0-9~!@#$&_?]
#__24 = [a-zA-Z0-9~!@#$&_?]
#__25 = #__24 #__25
#__25 = ϵ
#hashtag = '#' [a-zA-Z] #__25
#hashtag / [a-zA-Z0-9~!@#$&_?]


//#rule = #hashtag #ws '=' #ws #expr #ws ';'
#rule = #hashtag #ws '=' #ws #expr #ws ';'


//#start_symbol = (#ws #rule)* #ws
#__26 = #ws #rule
#__27 = #__26 #__27
#start_symbol = #__27 #ws

//augmented start symbol
#__28 = #start_symbol




/{Interesting notes

`((A)2)+` indicates `A` exactly 2, 4, 6, 8, ... times
while `(A)2+` indicates `A` exactly 2, 3, 4, 5, ... times
Also `((A)2)*` indicates `A` exactly 0, 2, 4, 6, ... times
`(A)5+ - (A)11+` indicates repeat `A` exactly 5 to 10 times

`(A+)?` is the same as `A*`. Same with `((A)2+)?` and `(A)2*`
Also `A?` is equivalent to (and represented internally as) `A | ϵ`
Also meaning that `A*` is represented as `A+ | ϵ`
`rule = A+` `__A = __A A | ϵ`, `rule = __A A`?

`(A)5+` indicates 5 or more of `A` while `(A)5*` indicates 0 or 5 or more of `A`

all expressions that reduce to a #set are combined / treated as a single unicode character set

all whitespace in charsets must either be escaped or in hex


}/