//http://www.engr.mun.ca/~theo/Courses/fm/pub/context-free.pdf
//https://www.w3.org/TR/xml/#sec-notation
//https://en.wikipedia.org/wiki/Whitespace_character

//Most of these should be purely character sets...

#eps = \x3f5 | '\\e';                                       // Ïµ or \e indicates empty element, i.e. nullable
//#wschar = [\x9-\xD\x20\x85\xA0\x1680\x2000-\x200A\x2028\x2029\x202F\x205F\x3000]; //ascii + unicode whitespace chars
#wschar = [\x9-\xD\x20];                                    // ascii whitespace characters.
#line_comment = '/' '/' \U* '\n';                           // single line comment
#block_comment = '/' '{' (#block_comment | \U)* '}/';          // block comment, with allowed nested block comments.
#ws = #wschar*;                                             // optional whitespace sequence
#anyset = '\\' [uUxX];                                      // \U, \u, \X, or \x used to indicate any unicode character
#hex = '\\' [uUxX] [0-9a-fA-F]+;                            // hex number literal. Basically skipping the number part makes it #any
#number = [0-9]+;                                           // decimal number literal. Used to indicate # of repetitions
#charsetchar = \U - [\-\[\]] - #wschar;                     // characters allowed in a set are any unicode excluding '-', '[', or ']', and whitespace
#item = #charsetchar | #escape | #hex;                      // items that make up character sets, i.e. raw chars, escape chars, or hex chars
#charset = '[' (#ws #item (#ws '-' #ws #item)? #ws)* ']';   // set of chars specified literally. Whitespace is ignored, and must be escaped.

//paired grouping operators
#group = '(' #ws #expr #ws ')';                             // group together/force precedence
#capture = '{' #ws #expr #ws '}';                           // group to capture
#char = '"' (\U - '"' | #escape) '"';                       // "" single character
#char = "'" (\U - "'" | #escape) "'";                       // '' single character
#string = '"' (\U - '"' | #escape)2* '"';                   // "" string of characters
#string = "'" (\U - "'" | #escape)2* "'";                   // '' string of characters
#escape = '\\' \U;                                          // an escape character. Recognized escaped characters are \n \r \t \v \b \f \a. All others just put the second character literally. Common literals include \\ \' \" \[ \] \-

//post operators
#star = #expr #ws (#number)? #ws '*';                       // zero or (number or more)
#plus = #expr #ws (#number)? #ws '+';                       // (number or one) or more 
#option = #expr #ws '?';                                    // optional
#count = #expr #ws #number;                                 // exactly number of
#compliment = #set #ws '~'                                  // compliment of. equivalent to #any - #set

//implicit operators
#cat = #expr (#ws #expr)+;                                  // concatenate left and right

//binary operators
#diff = #set #ws '-' #ws #set;                              // left but not right. TBD if only for charsets... could modify parser to allow for #expr here, where if both sides are matched, then it doesn't match...
#intersect = #set #ws '&' #ws #set;                         // intersect of left and right
#union = #set #ws '|' #ws #set;                             // union of left and right

#or = (#expr #ws '|' #ws #expr) - #union;                   // left or right. TODO->update restriction syntax that it excludes #union.

//syntax constructs
#set = #anyset | #char | #hex | #charset | #compliment | #diff | #intersect | #union;
#expr = #eps | #set | #group | #capture | #string | #star | #plus | #option | #count | #cat | #or | #identifier;
#hashtag = '#' [a-zA-Z] [a-zA-Z0-9~!@#$&_?]*;
#rule = #hashtag #ws '=' #ws #expr #ws ';';
#start_symbol = (#ws #rule)* #ws;

#update_parser_table(#start_symbol)


/{Interesting notes

`((A)2)+` indicates A exactly 2, 4, 6, 8, ... times
while `(A)2+` indicates A exactly 2, 3, 4, 5, ... times. 
Also `((A)2)*` indicates A exactly 0, 2, 4, 6, ... times

`A+?` is the same as `A*`. Same with `(A)2+?` and `(A)2*`

`(A)5+` indicates 5 or more of `A` while `(A)5*` indicates 0 or 5 or more of `A`

all expressions that reduce to a #set are combined / treated as a single unicode character set

all whitespace in charsets must either be escaped or in hex

}/

//e.g. 
#bare_range = #expr ':' #expr;
#range = #bare_range | [(\[] #bare_range [)\]];

/{
Precedence levels
3 - group
3 - capture
3 - hexset/charset []

4 - star
4 - plus
4 - option
4 - compliment
5 - diff
5 - intersect
5 - union

7 - concatenation


8 - or



#what about restrictions / disambiguation filters?
- follow (no follow | must follow)
- reject
- prefer
- precedence level + associativity


}/