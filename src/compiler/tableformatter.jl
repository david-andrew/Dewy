using DataFrames

#TODO->make this pipe text in from STDIN
#then see if C can call this when it outputs the table...

#s = raw"(I0, #program) -> {P1}, (I0, #__1) -> {P2}, (I0, #__2) -> {P3}, (I0, #ws) -> {P4}, (I0, #wschar) -> {P5}, (I0, [\t-\r\x20]) -> {P6, R(#__1, 0), R(#__10, 0)}, (I0, #line_comment) -> {P7}, (I0, /) -> {P8, R(#__1, 0), R(#__10, 0)}, (I0, #__4) -> {P9}, (I0, #__10) -> {P10}, (I0, #__11) -> {P11}, (I2, #ws) -> {P12}, (I2, #wschar) -> {P13}, (I2, [\t-\r\x20]) -> {P14}, (I2, #line_comment) -> {P15}, (I2, /) -> {P16}, (I2, #__4) -> {P17}, (I3, #__1) -> {P18}, (I3, #__2) -> {P3}, (I3, #ws) -> {P19}, (I3, #wschar) -> {P5}, (I3, [\t-\r\x20]) -> {P6, R(#__1, 1), R(#__1, 0)}, (I3, #line_comment) -> {P7}, (I3, /) -> {P8, R(#__1, 1), R(#__1, 0)}, (I3, #__4) -> {P9}, (I4, #assignment) -> {P20}, (I4, #identifier) -> {P21}, (I4, $) -> {P22}, (I8, /) -> {P23}, (I9, #ws) -> {P24}, (I9, #wschar) -> {P5}, (I9, [\t-\r\x20]) -> {P6}, (I9, #line_comment) -> {P7}, (I9, /) -> {P8}, (I9, #__4) -> {P9}, (I10, #ws) -> {P25}, (I10, #wschar) -> {P13}, (I10, [\t-\r\x20]) -> {P14}, (I10, #line_comment) -> {P15}, (I10, /) -> {P16}, (I10, #__4) -> {P17}, (I11, #ws) -> {P26}, (I11, #wschar) -> {P5}, (I11, [\t-\r\x20]) -> {P6, R(#__10, 1), R(#__10, 0)}, (I11, #line_comment) -> {P7}, (I11, /) -> {P8, R(#__10, 1), R(#__10, 0)}, (I11, #__4) -> {P9}, (I11, #__10) -> {P27}, (I11, #__11) -> {P11}, (I16, /) -> {P28}, (I17, #ws) -> {P29}, (I17, #wschar) -> {P13}, (I17, [\t-\r\x20]) -> {P14}, (I17, #line_comment) -> {P15}, (I17, /) -> {P16}, (I17, #__4) -> {P17}, (I19, #assignment) -> {P30}, (I19, #identifier) -> {P21}, (I19, $) -> {P22}, (I21, #ws) -> {P31}, (I21, #wschar) -> {P32}, (I21, [\t-\r\x20]) -> {P33}, (I21, #line_comment) -> {P34}, (I21, /) -> {P35}, (I21, #__4) -> {P36}, (I22, #__5) -> {P37}, (I22, [0-9A-Za-z]) -> {P38}, (I23, #__3) -> {P39}, (I23, [\x0-\t\v-\x10FFFF]) -> {P40}, (I26, #assignment) -> {P41}, (I26, #identifier) -> {P21}, (I26, $) -> {P22}, (I28, #__3) -> {P42}, (I28, [\x0-\t\v-\x10FFFF]) -> {P40}, (I31, =) -> {P43}, (I35, /) -> {P44}, (I36, #ws) -> {P45}, (I36, #wschar) -> {P32}, (I36, [\t-\r\x20]) -> {P33}, (I36, #line_comment) -> {P34}, (I36, /) -> {P35}, (I36, #__4) -> {P36}, (I38, #__5) -> {P46}, (I38, [0-9A-Za-z]) -> {P38}, (I39, \n) -> {P47}, (I40, #__3) -> {P48}, (I40, [\x0-\t\v-\x10FFFF]) -> {P40}, (I42, \n) -> {P49}, (I43, #ws) -> {P50}, (I43, #wschar) -> {P51}, (I43, [\t-\r\x20]) -> {P52}, (I43, #line_comment) -> {P53}, (I43, /) -> {P54}, (I43, #__4) -> {P55}, (I44, #__3) -> {P56}, (I44, [\x0-\t\v-\x10FFFF]) -> {P40}, (I50, #identifier) -> {P57}, (I50, $) -> {P58}, (I50, #number) -> {P59}, (I50, #) -> {P60}, (I50, #addition) -> {P61}, (I50, #__7) -> {P62}, (I50, #__9) -> {P63}, (I54, /) -> {P64}, (I55, #ws) -> {P65}, (I55, #wschar) -> {P51}, (I55, [\t-\r\x20]) -> {P52}, (I55, #line_comment) -> {P53}, (I55, /) -> {P54}, (I55, #__4) -> {P55}, (I56, \n) -> {P66}, (I58, #__5) -> {P67}, (I58, [0-9A-Za-z]) -> {P68}, (I60, #__6) -> {P69}, (I60, [0-9]) -> {P70}, (I62, #ws) -> {P71}, (I62, #wschar) -> {P72}, (I62, [\t-\r\x20]) -> {P73}, (I62, #line_comment) -> {P74}, (I62, /) -> {P75}, (I62, #__4) -> {P76}, (I63, ;) -> {P77}, (I64, #__3) -> {P78}, (I64, [\x0-\t\v-\x10FFFF]) -> {P40}, (I68, #__5) -> {P79}, (I68, [0-9A-Za-z]) -> {P68}, (I70, #__6) -> {P80}, (I70, [0-9]) -> {P70}, (I71, +) -> {P81}, (I75, /) -> {P82}, (I76, #ws) -> {P83}, (I76, #wschar) -> {P72}, (I76, [\t-\r\x20]) -> {P73}, (I76, #line_comment) -> {P74}, (I76, /) -> {P75}, (I76, #__4) -> {P76}, (I78, \n) -> {P84}, (I81, #ws) -> {P85}, (I81, #wschar) -> {P51}, (I81, [\t-\r\x20]) -> {P52}, (I81, #line_comment) -> {P53}, (I81, /) -> {P54}, (I81, #__4) -> {P55}, (I82, #__3) -> {P86}, (I82, [\x0-\t\v-\x10FFFF]) -> {P40}, (I85, #identifier) -> {P87}, (I85, $) -> {P88}, (I85, #number) -> {P89}, (I85, #) -> {P90}, (I85, #__8) -> {P91}, (I86, \n) -> {P92}, (I88, #__5) -> {P93}, (I88, [0-9A-Za-z]) -> {P94}, (I90, #__6) -> {P95}, (I90, [0-9]) -> {P96}, (I94, #__5) -> {P97}, (I94, [0-9A-Za-z]) -> {P94}, (I96, #__6) -> {P98}, (I96, [0-9]) -> {P96}, (I0, $) -> {ACCEPT, R(#program, 0), R(#__1, 0), R(#__10, 0)}, (I0, $) -> {R(#ws, 0)}, (I1, $) -> {ACCEPT}, (I2, $) -> {R(#program, 1), R(#ws, 0)}, (I3, $) -> {R(#__1, 1), R(#__1, 0)}, (I3, $) -> {R(#ws, 0)}, (I5, [\t-\r\x20]) -> {R(#__4, 1)}, (I5, /) -> {R(#__4, 1)}, (I5, $) -> {R(#__4, 1)}, (I6, [\t-\r\x20]) -> {R(#wschar, 1)}, (I6, /) -> {R(#wschar, 1)}, (I6, $) -> {R(#wschar, 1)}, (I7, [\t-\r\x20]) -> {R(#__4, 1)}, (I7, /) -> {R(#__4, 1)}, (I7, $) -> {R(#__4, 1)}, (I9, $) -> {R(#ws, 1), R(#ws, 0)}, (I10, $) -> {R(#program, 1), R(#ws, 0)}, (I11, $) -> {R(#__10, 1), R(#__10, 0)}, (I11, $) -> {R(#ws, 0)}, (I12, $) -> {R(#program, 2)}, (I13, [\t-\r\x20]) -> {R(#__4, 1)}, (I13, /) -> {R(#__4, 1)}, (I13, $) -> {R(#__4, 1)}, (I14, [\t-\r\x20]) -> {R(#wschar, 1)}, (I14, /) -> {R(#wschar, 1)}, (I14, $) -> {R(#wschar, 1)}, (I15, [\t-\r\x20]) -> {R(#__4, 1)}, (I15, /) -> {R(#__4, 1)}, (I15, $) -> {R(#__4, 1)}, (I17, $) -> {R(#ws, 1), R(#ws, 0)}, (I18, [\t-\r\x20]) -> {R(#__1, 2)}, (I18, /) -> {R(#__1, 2)}, (I18, $) -> {R(#__1, 2)}, (I20, [\t-\r\x20]) -> {R(#__2, 2), R(#__11, 2)}, (I20, /) -> {R(#__2, 2), R(#__11, 2)}, (I20, $) -> {R(#__2, 2), R(#__11, 2)}, (I20, $) -> {R(#__2, 2), R(#__11, 2)}, (I21, =) -> {R(#ws, 0)}, (I22, [\t-\r\x20]) -> {R(#identifier, 1), R(#__5, 0)}, (I22, /) -> {R(#identifier, 1), R(#__5, 0)}, (I22, =) -> {R(#identifier, 1), R(#__5, 0)}, (I23, \n) -> {R(#__3, 0)}, (I24, $) -> {R(#ws, 2)}, (I25, $) -> {R(#program, 2)}, (I27, [\t-\r\x20]) -> {R(#__10, 2)}, (I27, /) -> {R(#__10, 2)}, (I27, $) -> {R(#__10, 2)}, (I28, \n) -> {R(#__3, 0)}, (I29, $) -> {R(#ws, 2)}, (I30, [\t-\r\x20]) -> {R(#__2, 2)}, (I30, /) -> {R(#__2, 2)}, (I30, $) -> {R(#__2, 2)}, (I30, $) -> {R(#__2, 2)}, (I32, [\t-\r\x20]) -> {R(#__4, 1)}, (I32, /) -> {R(#__4, 1)}, (I32, =) -> {R(#__4, 1)}, (I33, [\t-\r\x20]) -> {R(#wschar, 1)}, (I33, /) -> {R(#wschar, 1)}, (I33, =) -> {R(#wschar, 1)}, (I34, [\t-\r\x20]) -> {R(#__4, 1)}, (I34, /) -> {R(#__4, 1)}, (I34, =) -> {R(#__4, 1)}, (I36, =) -> {R(#ws, 1), R(#ws, 0)}, (I37, [\t-\r\x20]) -> {R(#identifier, 2)}, (I37, /) -> {R(#identifier, 2)}, (I37, =) -> {R(#identifier, 2)}, (I38, [\t-\r\x20]) -> {R(#__5, 1), R(#__5, 0)}, (I38, /) -> {R(#__5, 1), R(#__5, 0)}, (I38, =) -> {R(#__5, 1), R(#__5, 0)}, (I40, \n) -> {R(#__3, 1), R(#__3, 0)}, (I41, [\t-\r\x20]) -> {R(#__11, 2)}, (I41, /) -> {R(#__11, 2)}, (I41, $) -> {R(#__11, 2)}, (I41, $) -> {R(#__11, 2)}, (I43, $) -> {R(#ws, 0)}, (I43, #) -> {R(#ws, 0)}, (I44, \n) -> {R(#__3, 0)}, (I45, =) -> {R(#ws, 2)}, (I46, [\t-\r\x20]) -> {R(#__5, 2)}, (I46, /) -> {R(#__5, 2)}, (I46, =) -> {R(#__5, 2)}, (I47, [\t-\r\x20]) -> {R(#line_comment, 4)}, (I47, /) -> {R(#line_comment, 4)}, (I47, $) -> {R(#line_comment, 4)}, (I48, \n) -> {R(#__3, 2)}, (I49, [\t-\r\x20]) -> {R(#line_comment, 4)}, (I49, /) -> {R(#line_comment, 4)}, (I49, $) -> {R(#line_comment, 4)}, (I51, [\t-\r\x20]) -> {R(#__4, 1)}, (I51, /) -> {R(#__4, 1)}, (I51, $) -> {R(#__4, 1)}, (I51, #) -> {R(#__4, 1)}, (I52, [\t-\r\x20]) -> {R(#wschar, 1)}, (I52, /) -> {R(#wschar, 1)}, (I52, $) -> {R(#wschar, 1)}, (I52, #) -> {R(#wschar, 1)}, (I53, [\t-\r\x20]) -> {R(#__4, 1)}, (I53, /) -> {R(#__4, 1)}, (I53, $) -> {R(#__4, 1)}, (I53, #) -> {R(#__4, 1)}, (I55, $) -> {R(#ws, 1), R(#ws, 0)}, (I55, #) -> {R(#ws, 1), R(#ws, 0)}, (I57, ;) -> {R(#__9, 1)}, (I57, [\t-\r\x20]) -> {R(#__7, 1)}, (I57, /) -> {R(#__7, 1)}, (I57, +) -> {R(#__7, 1)}, (I58, ;) -> {R(#identifier, 1), R(#__5, 0)}, (I58, [\t-\r\x20]) -> {R(#identifier, 1), R(#__5, 0)}, (I58, /) -> {R(#identifier, 1), R(#__5, 0)}, (I58, +) -> {R(#identifier, 1), R(#__5, 0)}, (I59, ;) -> {R(#__9, 1)}, (I59, [\t-\r\x20]) -> {R(#__7, 1)}, (I59, /) -> {R(#__7, 1)}, (I59, +) -> {R(#__7, 1)}, (I60, ;) -> {R(#number, 1), R(#__6, 0)}, (I60, [\t-\r\x20]) -> {R(#number, 1), R(#__6, 0)}, (I60, /) -> {R(#number, 1), R(#__6, 0)}, (I60, +) -> {R(#number, 1), R(#__6, 0)}, (I61, ;) -> {R(#__9, 1)}, (I62, +) -> {R(#ws, 0)}, (I64, \n) -> {R(#__3, 0)}, (I65, $) -> {R(#ws, 2)}, (I65, #) -> {R(#ws, 2)}, (I66, [\t-\r\x20]) -> {R(#line_comment, 4)}, (I66, /) -> {R(#line_comment, 4)}, (I66, =) -> {R(#line_comment, 4)}, (I67, ;) -> {R(#identifier, 2)}, (I67, [\t-\r\x20]) -> {R(#identifier, 2)}, (I67, /) -> {R(#identifier, 2)}, (I67, +) -> {R(#identifier, 2)}, (I68, ;) -> {R(#__5, 1), R(#__5, 0)}, (I68, [\t-\r\x20]) -> {R(#__5, 1), R(#__5, 0)}, (I68, /) -> {R(#__5, 1), R(#__5, 0)}, (I68, +) -> {R(#__5, 1), R(#__5, 0)}, (I69, ;) -> {R(#number, 2)}, (I69, [\t-\r\x20]) -> {R(#number, 2)}, (I69, /) -> {R(#number, 2)}, (I69, +) -> {R(#number, 2)}, (I70, ;) -> {R(#__6, 1), R(#__6, 0)}, (I70, [\t-\r\x20]) -> {R(#__6, 1), R(#__6, 0)}, (I70, /) -> {R(#__6, 1), R(#__6, 0)}, (I70, +) -> {R(#__6, 1), R(#__6, 0)}, (I72, [\t-\r\x20]) -> {R(#__4, 1)}, (I72, /) -> {R(#__4, 1)}, (I72, +) -> {R(#__4, 1)}, (I73, [\t-\r\x20]) -> {R(#wschar, 1)}, (I73, /) -> {R(#wschar, 1)}, (I73, +) -> {R(#wschar, 1)}, (I74, [\t-\r\x20]) -> {R(#__4, 1)}, (I74, /) -> {R(#__4, 1)}, (I74, +) -> {R(#__4, 1)}, (I76, +) -> {R(#ws, 1), R(#ws, 0)}, (I77, [\t-\r\x20]) -> {R(#assignment, 6)}, (I77, /) -> {R(#assignment, 6)}, (I77, $) -> {R(#assignment, 6)}, (I77, $) -> {R(#assignment, 6)}, (I79, ;) -> {R(#__5, 2)}, (I79, [\t-\r\x20]) -> {R(#__5, 2)}, (I79, /) -> {R(#__5, 2)}, (I79, +) -> {R(#__5, 2)}, (I80, ;) -> {R(#__6, 2)}, (I80, [\t-\r\x20]) -> {R(#__6, 2)}, (I80, /) -> {R(#__6, 2)}, (I80, +) -> {R(#__6, 2)}, (I81, #) -> {R(#ws, 0)}, (I81, $) -> {R(#ws, 0)}, (I82, \n) -> {R(#__3, 0)}, (I83, +) -> {R(#ws, 2)}, (I84, [\t-\r\x20]) -> {R(#line_comment, 4)}, (I84, /) -> {R(#line_comment, 4)}, (I84, $) -> {R(#line_comment, 4)}, (I84, #) -> {R(#line_comment, 4)}, (I87, ;) -> {R(#__8, 1)}, (I88, ;) -> {R(#identifier, 1), R(#__5, 0)}, (I89, ;) -> {R(#__8, 1)}, (I90, ;) -> {R(#number, 1), R(#__6, 0)}, (I91, ;) -> {R(#addition, 5)}, (I92, [\t-\r\x20]) -> {R(#line_comment, 4)}, (I92, /) -> {R(#line_comment, 4)}, (I92, +) -> {R(#line_comment, 4)}, (I93, ;) -> {R(#identifier, 2)}, (I94, ;) -> {R(#__5, 1), R(#__5, 0)}, (I95, ;) -> {R(#number, 2)}, (I96, ;) -> {R(#__6, 1), R(#__6, 0)}, (I97, ;) -> {R(#__5, 2)}, (I98, ;) -> {R(#__6, 2)}"
# s = raw"(I0, #S) -> {P1}, (I0, #C) -> {P2}, (I0, c) -> {P3}, (I0, d) -> {P4}, (I2, #C) -> {P5}, (I2, c) -> {P6}, (I2, d) -> {P7}, (I3, #C) -> {P8}, (I3, c) -> {P3}, (I3, d) -> {P4}, (I6, #C) -> {P9}, (I6, c) -> {P6}, (I6, d) -> {P7}, (I1, $) -> {ACCEPT}, (I4, c) -> {R(#C, 1)}, (I4, d) -> {R(#C, 1)}, (I5, $) -> {R(#S, 2)}, (I7, $) -> {R(#C, 1)}, (I8, c) -> {R(#C, 2)}, (I8, d) -> {R(#C, 2)}, (I9, $) -> {R(#C, 2)}"
# s = raw"(I0, #S) -> {P1}, (I0, #C) -> {P2}, (I0, [A-Za-z]) -> {P3}, (I0, [0-9]) -> {P4}, (I2, #C) -> {P5}, (I2, [A-Za-z]) -> {P6}, (I2, [0-9]) -> {P7}, (I3, #C) -> {P8}, (I3, [A-Za-z]) -> {P3}, (I3, [0-9]) -> {P4}, (I6, #C) -> {P9}, (I6, [A-Za-z]) -> {P6}, (I6, [0-9]) -> {P7}, (I1, $) -> {ACCEPT}, (I4, [A-Za-z]) -> {R(#C, 1)}, (I4, [0-9]) -> {R(#C, 1)}, (I5, $) -> {R(#S, 2)}, (I7, $) -> {R(#C, 1)}, (I8, [A-Za-z]) -> {R(#C, 2)}, (I8, [0-9]) -> {R(#C, 2)}, (I9, $) -> {R(#C, 2)}"
s = readline()

re = r"((\(I(\d+), ((#[#A-Za-z0-9_]+)|(\[[^\[\]]*\])|\\?[A-Za-z0-9\/$=#;+-@%^&*\\])\)\ -> \{([^{}]*)\}),?\s?)"

# matches = Vector{String}()

table = DataFrame()

getblankarray = (n) -> ["" for i in 1:n]

while true
    m = match(re, s)
    if m === nothing
        break
    end

    whole = m[1]
    state = parse(Int, m[3]) + 1 #julia arrays start at 1
    terminal = m[4]
    cell = m[7]

    #check if the column needs to be added
    if !(terminal in names(table))
        table[!, terminal] = getblankarray(nrow(table))
    end

    #check if any new rows are needed
    if nrow(table) < state
        n = state - nrow(table)
        blankrows = DataFrame([name => getblankarray(n) for name in names(table)]...)
        append!(table, blankrows)
    end

    #insert the cell into the table
    table[state, terminal] = cell
    
    
    #eat the matched input
    global s = s[length(whole)+1:end]
end

tablestr = string(table)
lines = split(tablestr, "\n")
tablestr = join(lines[[2, 4:length(lines)...]], "\n")
tablestr = "    " * tablestr[5:end] #filter out the " Row" string from the start

println(tablestr)