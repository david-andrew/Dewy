//The goal of this file is to sequentially build out the aspects of the compiler compiler
//All rules are borrowed from standard syntax

//1) rule for identifying decimal digits
#decimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
#decimal_prefix = '0D' | '0d'; //obviously optional
#decimal_digit_string = #decimal_digits, {#decimal_digit | '_'};
#decimal_natural = [#decimal_prefix], #decimal_digit_string;


//test if compiler can identify decimal digit
#lex(/{comment inside of meta-function call}/ #decimal_natural  )
//0
//0d
//0d4868576


//2) rules for identifying decimal exponential number
#decimal_rational = #decimal_natural, '.', #decimal_digit_string;
#decimal_floating_point = #decimal_rational, [('e'|'E'), ['-'|'+'], #decimal_rational];

//3) rules for identifying identifiers
#lowercase_letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' 
    | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
#uppercase_letter = 'A'| 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
    | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z';
#symbols = '~' | '!' | '@' | '#' | '$' | '&' | '_' | '?'; 

#identifier = (#uppercase_letter | #lowercase_letter), {#uppercase_letter | #lowercase_letter | #decimal_digit | #symbols };

//test if compiler can identify the identifier
//apple
//BaNaNaN
//apple&b@n@n@!
//Ra$pberry5?
//F&#!?_@