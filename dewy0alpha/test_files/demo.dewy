//this is a demo of all the functionality requested in the trello card

//1) rule for identifying decimal numbers
#decimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
#decimal_prefix = '0D' | '0d'; //obviously optional
#decimal_digit_string = #decimal_digit, {#decimal_digit | '_'};
#decimal_natural = [#decimal_prefix], #decimal_digit_string;
#decimal_rational = #decimal_natural, '.', #decimal_digit_string;
#decimal_floating_point = (#decimal_rational | #decimal_natural), [('e'|'E'), ['-'|'+'], (#decimal_rational | #decimal_natural)];

//combine all into a single rule. This is actually not necessary, and will probably make parsing slightly more verbose...
#decimal_number = #decimal_natural | #decimal_rational | #decimal_floating_point;


//2) rules for physical units
#yotta_symbol = 'Y'; #yotta_name = 'yotta';
#zetta_symbol = 'Z'; #zetta_name = 'zetta';
#exa_symbol   = 'E'; #exa_name   = 'exa';
#peta_symbol  = 'P'; #peta_name  = 'peta';
#tera_symbol  = 'T'; #tera_name  = 'tera';
#giga_symbol  = 'G'; #giga_name  = 'giga';
#mega_symbol  = 'M'; #mega_name  = 'mega'; 
#kilo_symbol  = 'k'; #kilo_name  = 'kilo';
#centi_symbol = 'c'; #centi_name = 'centi';
#milli_symbol = 'm'; #milli_name = 'milli';
#micro_symbol = 'u' | 'Î¼'; #micro_name = 'micro';
#nano_symbol  = 'n'; #nano_name  = 'nano';
#pico_symbol  = 'p'; #pico_name  = 'pico';
#femto_symbol = 'f'; #femto_name = 'femto';
#atto_symbol  = 'a'; #atto_name  = 'atto';
#zepto_symbol = 'z'; #zepto_name = 'zepto';
#yocto_symbol = 'y'; #yocto_name = 'yocto';
#prefix_symbol = #yotta_symbol | #zetta_symbol | #exa_symbol | #peta_symbol | #tera_symbol | #giga_symbol | #mega_symbol | #kilo_symbol | #centi_symbol | #milli_symbol | #micro_symbol | #nano_symbol | #pico_symbol | #femto_symbol | #atto_symbol | #zepto_symbol | #yocto_symbol;
#prefix_name = #yotta_name | #zetta_name | #exa_name | #peta_name | #tera_name | #giga_name | #mega_name | #kilo_name | #centi_name | #milli_name | #micro_name | #nano_name | #pico_name | #femto_name | #atto_name | #zepto_name | #yocto_name;
#gram_symbol    = 'g';   #gram_name    = 'gram';             #gram_plural    = 'grams';
#metre_symbol   = 'm';   #metre_name   = 'meter' | 'metre';  #metre_plural   = 'meters' | 'metres';
#second_symbol  = 's';   #second_name  = 'second';           #second_plural  = 'seconds';
#ampere_symbol  = 'A';   #ampere_name  = 'ampere' | 'amp';   #ampere_plural  = 'amperes' | 'amps';
#kelvin_symbol  = 'K';   #kelvin_name  = 'kelvin';           //kelvin is the plural of kelvin. (may include anyways though...)
#mole_symbol    = 'mol'; #mole_name    = 'mole' | 'mol';     #mole_plural    = 'moles' | 'mols'; //mol is weird because it's symbol can also be it's written out name, i.e. Gmol gigamol, gigamols, gigamole, gigamoles   
#candela_symbol = 'cd';  #candela_name = 'candela';          #candela_plural = 'candelas'; 
#unit_symbol = #gram_symbol | #metre_symbol | #second_symbol | #ampere_symbol | #kelvin_symbol | #mole_symbol | #candela_symbol;
#unit_name = #gram_name | #metre_name | #second_name | #ampere_name | #kelvin_name | #mole_name | #candela_name;
#unit_plural = #gram_plural | #metre_plural | #second_plural | #ampere_plural | #mole_plural | #candela_plural; //kelvin does not have a plural form
#unit = ([#prefix_symbol], #unit_symbol) | ([#prefix_name], (#unit_name | #unit_plural));


//3) rules for identifying identifiers
#lowercase_letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' 
    | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
#uppercase_letter = 'A'| 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
    | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z';
#symbols = '~' | '!' | '@' | '#' | '$' | '&' | '_' | '?'; 
#identifier = (#uppercase_letter | #lowercase_letter | '_'), {#uppercase_letter | #lowercase_letter | #decimal_digit | #symbols };

//4) rule for hashtags
#hashtag = '#', #identifier;

//5) rule for reserved words.
//TODO make case insensitive
#reserved_word = 'loop' | 'if' | 'else' | 'return' | 'in' | 'as' | 'transmute' | 'continue' | 'break' | 'exit' | 'quit' | 'yield' | 'constant' | 'symbol';

//6) strings (without interpolation
#whitespace = ' ';
#string_content = { #lowercase_letter | #uppercase_letter | #symbols | #decimal_digit | #whitespace };
#string = ('"', #string_content, '"') | ("'", #string_content, "'");

//7) number and string ranges
#number_range = #decimal_number, {#whitespace}, ':', {#whitespace}, #decimal_number;
#string_range = #string, {#whitespace}, ':', {#whitespace}, #string;
#range_body = #number_range | #string_range;
#range = (('(' | '['), {#whitespace}, #range_body, {#whitespace}, (')' | ']')) | #range_body;


//8) bodyless function
#function = 
    #identifier, 
    {#whitespace}, 
    '=', 
    {#whitespace}, 
    ( 
        #identifier | 
        ('(', [{{#whitespace}, #identifier, {#whitespace}, ','}, {#whitespace}, #identifier], ')') 
    ),
    {#whitespace}, 
    '=>', 
    {#whitespace}, 
    (('{',{#whitespace},'}') | ('(',{#whitespace},')'));


#lex(#identifier)
#lex(#unit) //needs to be after identifier so that it will be checked first
#lex(#reserved_word)
#lex(#decimal_number)
#lex(#string)
#lex(#range)
#lex(#function)

//#lex(#hashtag) //TODO->this needs to ignore reserved hashtags, like #lex

