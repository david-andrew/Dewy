/{
    DewySpeak Standard Syntax Definition
    #Author = "David Samson"
    #Date = "12019-03-06"

    This file defines the standard syntax of the dewy language using the built-in macro language    
    The macro language is a slightly modified version of Extended Backus-Naur form (EBNF). Changes were made to accomdate embedding EBNF in the DewySpeak Language.

    The following changes are made/restrictions imposed:
    1. meta-identifiers have a restriction on thier form*
    2. EBNF comments are not included. Instead Dewy style comments (// and /{} /) may be used, as this is still Dewy source code [TODO, fix syntax highlighting so that you can embed comments, i.e. be able to remove the space]
    3. The definition of a rule can be extended by including a rule in the body of its redefinition. Basic updates would be:
       -> #rule = #rule | new_rules; can be used to include another option
       -> #rule = #rule - new_rules; can be used to subtract from the options
       -> #rule = num * #rule; can be used to duplicate the rule
       -> #rule = #rule, new_rules; can be used to append to the rule
       Additionally any other appearance of #rule in the body will update the definition
       -> e.g. #rule = {#rule | "A"}-; would redefine a rule so that #rule or "A" could occur in a sequence of 1 or more. (note that in EBNF, "{something}-" means a sequence of at least 1, because it subtracts the empty option from the sequence)
    4. The special symbol sequence "? ... ?" may be ignored as ? are important for identifiers

    *Rules for macro identifiers:
    Basically the same as the rules for normal Dewy identifiers, except, they must start with a '#' symbol
    Here's the EBNF definition:
    #number = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
    #letter = 'A' | 'B' | 'C' | 'D' | 'E' | ... | 'v' | 'w' | 'x' | 'y' | 'z' |;  //include unicode characters?
    #symbol = '~' | '!' | '@' | '#' | '$' | '&' | '_' | '?'; //include 'â€½' as well?
    #identifier = '#', #letter, {#letter | #number | #symbol}

    For more details, see: https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form
    Full EBNF specification: http://standards.iso.org/ittf/PubliclyAvailableStandards/s026153_ISO_IEC_14977_1996(E).zip

    The way the macro language works while parsing Dewy source code is that tokens are parsed sequentially according to rules
    - All rules defined by macros are evaluated first
    - Rules hardcoded into the compiler are evaluated second
    The purpose of this is so that the entire language can be defined via the macro language, and any hardcoded rules can be superceded by macro rules

    <TODO, write out explanation of EBNF and compiler compiler rules>
    
    <TODO, work on how EBNF tokens translate to actual code rules...> i.e. the "compiler compiler" or compiler generator
    -> basically need to read about compiler compilers, e.g. YACC, and see how they work
    -> My first guess would be that all of these objects are parsed into JSON like format, which can then be accessed in the same way as a json
    -> this means there ought to be some way to make elements that are named that can be referred to dictionary index-like?

    I'm thinking that #defining something twice overwrites the original definition. This way a person could e.g. change the digits of a base. This can also be used to extend the definition of something, e.g. #identifier = #identifier | new_rules; or #identifier = #identifier, new_rules; or #identifier = num * #identifier; or #identifier = #identifier - exclusions;
    I think that in general, if the compiler detects that something is being overwritten, the default warnings will be issued if the override is of something from a different source file.
    -> If the source file is the same, then there probably doesn't need to be an error about the override 
    

    I think a good exercise will be finishing a basic interpreter/compiler (doesn't need to be dewy) and then using the lessons from there to define the macro language

    look into standardizing all the base names with either '-nary' or '-imal' or something else
}/



//note that #define doesn't make the compiler match for it, rather it just makes a rule entry for it. only if it is called via something like #tokanize or #parse or #evaluate? will it actually be searched for
//I'm thinking that if #tokanize is used to convert things into tokans, that they should all be at the end in the order that they need to be checked in, so as to not skip anything

//[DONE] consider removing #define, and having it be directly #identifier = rule;
//problem is, how can hashtags not be required to have the semicolon? perhaps if there's no '=' sign, then no semicolon, because that's only part of the rule


//#ignore_case = ? hard code ignore case into the compiler ?
//any other hardcoded macros defined here

//base 2
#binary_digit = '0' | '1';
#binary_prefix = '0B' | '0b';
#binary = #binary_prefix, #binary_digit, {#binary_digit | '_'};

//base 3
//#define ternary_digit = '0' | '1' | '2';
//#define balanced_ternary_digit = 'T' | '0' | '1';

//base 4
#quaternary_digit = '0' | '1' | '2' | '3';
#quaternary_prefix = '0Q' | '0q';
#quaternary = #quaternary_prefix, #quaternary_digit, {#quaternary_digit | '_'};

//base 6
#seximal_digit = '0' | '1' | '2' | '3' | '4' | '5';
#seximal_prefix = '0S' | '0s';
#seximal = #seximal_prefix, #seximal_digit, {#seximal_digit | '_'};

//base 8
#octal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7';
#octal_prefix = '0O' | '0o';
#octal = #octal_prefix, #octal_digit, {#octal_digit | '_'};

//base 10
#decimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
#decimal_prefix = '0D' | '0d'; //obviously optional
#decimal = [#decimal_prefix], #decimal_digit, {#decimal_digit | '_'};

//base 12
#dozenal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ('X' | 'x') | ('E' | 'e');
#dozenal_prefix = '0Z' | '0z';
#dozenal = #dozenal_prefix, #dozenal_digit, {#dozenal_digit | '_'};

//base 16
#hexadecimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 
    | ('A' | 'a') | ('B' | 'b') | ('C' | 'c') | ('D' | 'd') | ('E' | 'e') | ('F' | 'f');
#hexadecimal_prefix = '0X' | '0x';
#hexadecimal = #hexadecimal_prefix, #hexadecimal_digit, {#hexadecimal_digit | '_'};

//base 32
#duotrigesimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 
    | ('A' | 'a') | ('B' | 'b') | ('C' | 'c') | ('D' | 'd') | ('E' | 'e') | ('F' | 'f')
    | ('G' | 'g') | ('H' | 'h') | ('I' | 'i') | ('J' | 'j') | ('K' | 'k') | ('L' | 'l')
    | ('M' | 'm') | ('N' | 'n') | ('O' | 'o') | ('P' | 'p') | ('Q' | 'q') | ('R' | 'R')
    | ('S' | 's') | ('T' | 't') | ('U' | 'u') | ('V' | 'v');
#duotrigesimal_prefix = '0U' | '0u';
#duotrigesimal = #duotrigesimal_prefix, #duotrigesimal_digit, {#duotrigesimal_digit | '_'};

//base 36
#hexatridecimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
    | ('A' | 'a') | ('B' | 'b') | ('C' | 'c') | ('D' | 'd') | ('E' | 'e') | ('F' | 'f')
    | ('G' | 'g') | ('H' | 'h') | ('I' | 'i') | ('J' | 'j') | ('K' | 'k') | ('L' | 'l')
    | ('M' | 'm') | ('N' | 'n') | ('O' | 'o') | ('P' | 'p') | ('Q' | 'q') | ('R' | 'R')
    | ('S' | 's') | ('T' | 't') | ('U' | 'u') | ('V' | 'v') | ('W' | 'w') | ('X' | 'x')
    | ('Y' | 'y') | ('Z' | 'z');
#hexatridecimal_prefix = '0R' | '0r';
#hexatridecimal = #hexatridecimal_prefix, #hexatridecimal_digit, {#hexatridecimal_digit | '_'};

//base 64
//[DONE] consider changing the last 2 digits used here to something else, e.g. !, &, $, so that the syntax used by @, and the number separator '_' can interop easily
#tetrasexagesimal_digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
    | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'
    | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'
    | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D'
    | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
    | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'
    | 'Y' | 'Z' | '!' | '?';
#tetrasexagesimal_prefix = '0T' | '0t';
#tetrasexagesimal = #tetrasexagesimal_prefix, #tetrasexagesimal_digit, {#tetrasexagesimal_digit | '_'};





//defining integers in each base
#binary_integer           = ['-'], #binary;
#quaternary_integer       = ['-'], #quaternary;
#seximal_integer          = ['-'], #seximal;
#octal_integer            = ['-'], #octal;
#decimal_integer          = ['-'], #decimal;
#dozenal_integer          = ['-'], #dozenal;
#hexadecimal_integer      = ['-'], #hexadecimal;
#duotrigesimal_integer    = ['-'], #duotrigesimal;
#hexatridecimal_integer   = ['-'], #hexatridecimal;
#tetrasexagesimal_integer = ['-'], #tetrasexagesimal;

#integer = #binary_integer | #quaternary_integer | #seximal_integer | #octal_integer | #decimal_integer
    | #dozenal_integer | #hexadecimal_integer | #duotrigesimal_integer | #hexatridecimal_integer | #tetrasexagesimal_integer;


//defining floats in each base. Note that the later bases require a space between the exponent identifier and the number/mantissa
#exponent = 'e' | 'E'
#binary_float           = #binary_integer,           '.', [{' '},      #exponent, {' '},      #binary_integer, ['.',           #binary]]
#quaternary_float       = #quaternary_integer,       '.', [{' '},      #exponent, {' '},      #quaternary_integer, ['.',       #quaternary]]
#seximal_float          = #seximal_integer,          '.', [{' '},      #exponent, {' '},      #seximal_integer, ['.',          #seximal]]
#octal_float            = #octal_integer,            '.', [{' '},      #exponent, {' '},      #octal_integer, ['.',            #octal]]
#decimal_float          = #decimal_integer,          '.', [{' '},      #exponent, {' '},      #decimal_integer, ['.',          #decimal]]
#dozenal_float          = #dozenal_integer,          '.', [' ', {' '}, #exponent, ' ', {' '}, #dozenal_integer, ['.',          #dozenal]]
#hexadecimal_float      = #hexadecimal_integer,      '.', [' ', {' '}, #exponent, ' ', {' '}, #hexadecimal_integer, ['.',      #hexadecimal]]
#duotrigesimal_float    = #duotrigesimal_integer,    '.', [' ', {' '}, #exponent, ' ', {' '}, #duotrigesimal_integer, ['.',    #duotrigesimal]]
#hexatridecimal_float   = #hexatridecimal_integer,   '.', [' ', {' '}, #exponent, ' ', {' '}, #hexatridecimal_integer, ['.',   #hexatridecimal]]
#tetrasexagesimal_float = #tetrasexagesimal_integer, '.', [' ', {' '}, #exponent, ' ', {' '}, #tetrasexagesimal_integer, ['.', #tetrasexagesimal]]

#float = #binary_float | #quaternary_float | #seximal_float | #octal_float | #decimal_float
    | #dozenal_float | #hexadecimal_float | #duotrigesimal_float | #hexatridecimal_float | #tetrasexagesimal_float;

//this one will probably be hardcoded into the language
//#define token = '`', {? any sequence characters except backticks ?}, '`';




//Attempt to parse based on how yacc/lex method works
//there needs to be a step that sanitizes the tokens into the llvm format though, i.e. no underscores, or any conversions that are needed...
//perhaps there could be a definition for pure integer where anything that is of that type has been sanitized...

//defining addition for integers and floats: //I think somehow whitespace ought to be sanitized before this step
#addition = (#integer, {#whitespace}, '+', {#whitespace}, #integer := llvm.int_add(#0, #4))
        | (#float, {#whitespace}, '+', {#whitespace}, #float := llvm.float_add(#0, #4));

#subtraction = //definition of subtraction
#multiplication = //definition of multiplication
//etc.

//start building up the rules for the AST
#expression = #addition | #subtraction | #multiplication | #division | /{etc.}/;
#function = #identifier, '(', {[#type],#identifier}, ')', '=', (#expression | #statement | #block); //then need to define how function calls work... e.g. llvm function def?
#block = '{', {#statement | #expression}, '}'

//my problem with this definition, is I want to be able to define dispatch for the various types, though 
//also it still isn't clear how things are sanitized into data
//there definitely needs to be some sort of programatic way to combine the different tokens, with possibly multiple steps
//I do like the syntax though of using := to define the irreducable rule, and then using #0, #1, #2, ... etc. to refer to the n'th token. though what about optionals and sequences?
//I also do like how it still is basically using EBNF to define how the parse tree looks


//is there some way to specify case/ignore case for the name one?
#yotta_symbol = 'Y'; #yotto_name = 'yotta'; //where ignore_case would be hardcoded into the compiler?
#zetta_symbol = 'Z'; #zetta_name = 'zetta';
#exa_symbol   = 'E'; #exa_name   = 'exa';
#peta_symbol  = 'P'; #peta_name  = 'peta';
#tera_symbol  = 'T'; #tera_name  = 'tera';
#giga_symbol  = 'G'; #giga_name  = 'giga';
#mega_symbol  = 'M'; #mega_name  = 'mega'; 
#kilo_symbol  = 'k'; #kilo_name  = 'kilo';
#centi_symbol = 'c'; #centi_name = 'centi';
#milli_symbol = 'm'; #milli_name = 'milli';
#micro_symbol = 'u' | 'Î¼'; #micro_name = 'micro';
#nano_symbol  = 'n'; #nano_name  = 'nano';
#pico_symbol  = 'p'; #pico_name  = 'pico';
#femto_symbol = 'f'; #femto_name = 'femto';
#atto_symbol  = 'a'; #atto_name  = 'atto';
#zepto_symbol = 'z'; #zepto_name = 'zepto';
#yocto_symbol = 'y'; #yocto_name = 'yocto';

#prefix_symbol = #yotta_symbol | #zetta_symbol | #exa_symbol | #peta_symbol | #tera_symbol | #giga_symbol | #mega_symbol | #kilo_symbol
    | #centi_symbol | #milli_symbol | #micro_symbol | #nano_symbol | #pico_symbol | #femto_symbol | #atto_symbol | #zepto_symbol | #yocto_symbol;
#prefix_name = #yotta_name | #zetta_name | #exa_name | #peta_name | #tera_name | #giga_name | #mega_name | #kilo_name
    | #centi_name | #milli_name | #micro_name | #nano_name | #pico_name | #femto_name | #atto_name | #zepto_name | #yocto_name;
 

#gram_symbol    = 'g';   #gram_name    = 'gram';             #gram_plural    = 'grams';
#metre_symbol   = 'm';   #metre_name   = 'meter' | 'metre';  #metre_plural   = 'meters' | 'metres';
#second_symbol  = 's';   #second_name  = 'second';           #second_plural  = 'seconds';
#ampere_symbol  = 'A';   #ampere_name  = 'ampere' | 'amp';   #ampere_plural  = 'amperes' | 'amps';
#kelvin_symbol  = 'K';   #kelvin_name  = 'kelvin';           //kelvin is the plural of kelvin. (may include anyways though...)
#mole_symbol    = 'mol'; #mole_name    = 'mole' | 'mol';     #mole_plural    = 'moles' | 'mols'; //mol is weird because it's symbol can also be it's written out name, i.e. Gmol gigamol, gigamols, gigamole, gigamoles   
#candela_symbol = 'cd';  #candela_name = 'candela';          #candela_plural = 'candelas'; 

#unit_symbol = #gram_symbol | #metre_symbol | #second_symbol | #ampere_symbol | #kelvin_symbol | #mole_symbol | #candela_symbol;
#unit_name = #gram_name | #metre_name | #second_name | #ampere_name | #kelvin_name | #mole_name | #candela_name;
#unit_plural = #gram_plural | #metre_plural | #second_plural | #ampere_plural | #mole_plural | #candela_plural; //kelvin does not have a plural form

//define how units can be combined
#unit = ([#prefix_symbol], #unit_symbol) | #ignore_case ([#prefix_name], (#unit_name | #unit_plural)); //#ignore_case is hardcoded into the compiler, and operates on the next step in the rule, and allows lower or uppercase to be matched. need to be careful about how this deals with non-ascii encodings


//to do, finish this
#reserved_word = #ignore_case ('loop' | 'if' | 'else' | 'return' | 'in' | 'as' | 'transmute' | 'continue' | 'break' | 'exit' | 'quit' | 'yield' | 'constant' | 'symbol')
#operators = ;
#punctuation = ;

//define identifiers. I've decided to be a bit more lax about identifiers, even allowing them to contain @ and #
#lowercase_letter = 'a'| 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' 
    | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
#uppercase_letter = 'A'| 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
    | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z';
#symbols = '~' | '!' | '@' | '#' | '$' | '&' | '_' | '?'; 

#identifier = (#uppercase_letter | #lowercase_letter), {#uppercase_letter | #lowercase_letter | #decimal_digit | #symbols };


//standard style for function names will be to use '!' for mutators, and '?' for returning expressions, and '?!' or '!?' for mutations that also return expressions
//e.g. obj.is_active?() and obj.activate!() might respectively return a bool, and mutate the object.
//e.g. queue.pop!?() or queue.popâ€½() will both mutate the queue and return a value
//standard style will probably also be to use the parenthesis for zero argument functions, but it is not necessary [I'm not sure about this rule...]
//i.e. obj.is_active? and obj.is_active?() both call the function


#macro_identifier = '#', #identifier;



//step where the compiler is told to search for each pattern in sequence

#tokanize #unit
#tokanize #identifier //tell the compiler to match for these
