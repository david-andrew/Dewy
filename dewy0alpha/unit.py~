class Unit:
    """Class for representing any physical units. Mainly for SI, but optionally other units as well"""
    
    #unit enum replacement. access with Unit.meter for example
    meter = 'meter'
    gram = 'gram'
    second = 'second'
    amp = 'amp'
    kelvin = 'kelvin'
    mole = 'mole'
    candela = 'candela'
    
    
    
    # for now, skipping hecto, deca, deci, (maybe micro->should be actual mu symbol in unicode)
    # include empty for optional no prefix. make sure empty is last so that non-emptys match first
    SI_short_prefixes = {'E':18, 'P':15, 'T':12, 'G':9, 'M':6, 'k':3, 'c':-2, 'm':-3, 'mu':-6, 'n':-9, 'p':-12, 'f':-15, 'a':-18}
    
    SI_long_prefixes = {'exa':18, 'peta':15, 'tera':12, 'giga':9, 'mega':6, 'kilo':3, 'centi':-2, 'milli':-3, 'micro':-6, 'nano':-9, 'pico':-12, 'femto':-15, 'atto':-18}
    
    SI_short_units = ['m', 'g', 's', 'A', 'K', 'mol', 'cd']
    
    SI_long_units = ['meter', 'metre', 'gram', 'second', 'amp', 'ampere', 'kelvin', 'mole', 'candela']
    
    SI_short_derived_units = ['Hz', 'rad', 'sr', 'N', 'Pa', 'J', 'W', 'C', 'V', 'F', 'omega', 'ohm', 'S', 'Wb', 'T', 'H', 'deg C', 'lm', 'lx', 'Bq', 'Gy', 'Sv', 'kat']
    
    SI_long_derived_units = ['hertz', 'radian', 'steradian', 'newton', 'pascal', 'joule', 'watt', 'coulomb', 'volt', 'farad', 'ohm', 'siemens', 'weber', 'tesla', 'henry', 'degree celsius', 'degrees celsius', 'lumen', 'lux', 'becquerel', 'gray', 'sievert', 'katal']
    
    other_short_units = ['deg', 'B', 'bit']
    
    other_long_units = ['degree', 'byte', 'bit']#, 'minute' 'second', 'hour', 'day', 'year', 'century', 'centuries']
    
    other_short_prefixes = ['Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi']
    
    other_long_prefixes = ['kibi','mebi', 'gibi', 'tebi', 'pebi', 'exbi', 'zebi', 'yobi'] #for bytes/bits only?
    

    
    
    def __init__(self, prefix, unit):
        self.prefix = prefix
        self.unit = unit
        
        
    def __str__(self):
        pass
        
        
    def __repr__(self):
        pass
        
        
    @staticmethod
    def match_units(text):
        #match the current text with an SI unit and optional prefix
        #no multiplications, spaces, or divisions -> those will be handled on subsequent scanner passes
        
        #rules
        #SI units are incorrect if they are followed by an alphanumeric character
        #SI unit = ([short prefix] , short base unit) | ([long prefix] , long base unit)
        #short prefix = E | P | T | G | M | k | h | c | m | mu | n | p | f | a
        #short base unit = m | g | s | A | K | mol | cd
        #long prefix = exa | peta | tera | giga | mega | kilo | centi | milli | micro | nano | pico | femto | atto
        #long base unit = (meter,[s]) | (gram,[s]) | (second,[s]) | (amp,[s]) | kelvin | (mole,[s]) | (candela,[s])
        #
        # note that the gram is not an actual base unit, it is just the base word. the kilogram is the base unit
        
        #hertz Hz, radians rad, newtons N, pascals Pa, joules J, watts W, coulombs C, volts V, farad F, ohm Omega, siemens S, weber Wb, tesla T, henry H, degrees Celsius deg C (no prefixes?), lumen lm, lux lx, becquerel Bq, gray Gy, sievert Sv, katal kat
        
            
        if len(text) < 20:
            text += ' ' * 25 # add extra text to the end, if the length is not long enough
                
                
        #match short SI prefixes (G, M, k, c, m, n, etc.)
        for p in {**Unit.SI_short_prefixes, **{'':0}}:    #include empty to allow for no prefix
            if text.startswith(p):
                        
                #match short SI units (m, g, s, etc.)
                for u in Unit.SI_short_units:
                    if text.startswith(u, len(p)):
                        if not text[len(p)+len(u)].isalnum():
                            return (p, u)
                                
                #match short derived SI units (Pa, N, rad, Hz, etc.)
                for u in Unit.SI_short_derived_units:
                    if text.startswith(u, len(p)):
                        if not text[len(p)+len(u)].isalnum():
                            return (p, u)
                                        
        #for written out units, capitalization doesn't matter, and can be singular or plural
        #match long SI prefixes (giga, mega, kilo, centi, etc.)
        for p in {**Unit.SI_long_prefixes, **{'':0}}:    #include empty to allow for no prefix
            if text.lower().startswith(p):
                                                
                #match long SI units (meter, gram, second, etc.) with optional 's' on the end
                for u in Unit.SI_long_units:
                    if text.lower().startswith(u, len(p)):
                        if text[len(p) + len(u)] in 'sS':    #if 's' is at the end of the unit. what if plural ends in 'es'?
                            u += 's'
                        if not text[len(p) + len(u)].isalnum():
                            return (p, u)
                                                            
                for u in Unit.SI_long_derived_units:
                    if text.lower().startswith(u, len(p)):
                        if text[len(p) + len(u)] in 'sS':
                            u += 's'
                        if not text[len(p) + len(u)].isalnum():
                            return (p, u)
                        
        #look for other units? liters, etc.
        
        #if no units are found
        return None
